[{"class":"android.net.ConnectivityManager","api":"getActiveNetwork","permissionText":"Returns a Network object corresponding to the currently active\n default data network.  In the event that the current active default data\n network disconnects, the returned Network object will no longer\n be usable.  This will return null when there is no default\n network.\n\n \n Requires Manifest.permission.ACCESS_NETWORK_STATE"},{"class":"android.net.ConnectivityManager","api":"getActiveNetworkInfo","permissionText":"Returns details about the currently active default data network. When\n connected, this network is the default route for outgoing connections.\n You should always check NetworkInfo#isConnected() before initiating\n network traffic. This may return null when there is no default\n network.\n Note that if the default network is a VPN, this method will return the\n NetworkInfo for one of its underlying networks instead, or null if the\n VPN agent did not specify any. Apps interested in learning about VPNs\n should use getNetworkInfo(android.net.Network) instead.\n\n \n Requires Manifest.permission.ACCESS_NETWORK_STATE"},{"class":"android.net.ConnectivityManager","api":"getAllNetworkInfo","permissionText":"Returns connection status information about all network\n types supported by the device.\n\n \n Requires Manifest.permission.ACCESS_NETWORK_STATE"},{"class":"android.net.ConnectivityManager","api":"getAllNetworks","permissionText":"Returns an array of all Network currently tracked by the\n framework.\n\n \n Requires Manifest.permission.ACCESS_NETWORK_STATE"},{"class":"android.net.ConnectivityManager","api":"getLinkProperties","permissionText":"Get the LinkProperties for the given Network.  This\n will return null if the network is unknown.\n\n \n Requires Manifest.permission.ACCESS_NETWORK_STATE"},{"class":"android.net.ConnectivityManager","api":"getMultipathPreference","permissionText":"Provides a hint to the calling application on whether it is desirable to use the\n multinetwork APIs (e.g., Network#openConnection, Network#bindSocket, etc.)\n for multipath data transfer on this network when it is not the system default network.\n Applications desiring to use multipath network protocols should call this method before\n each such operation.\n\n \n Requires Manifest.permission.ACCESS_NETWORK_STATE"},{"class":"android.net.ConnectivityManager","api":"getNetworkCapabilities","permissionText":"Get the NetworkCapabilities for the given Network.  This\n will return null if the network is unknown.\n\n \n Requires Manifest.permission.ACCESS_NETWORK_STATE"},{"class":"android.net.ConnectivityManager","api":"getNetworkInfo","permissionText":"Returns connection status information about a particular\n network type.\n\n \n Requires Manifest.permission.ACCESS_NETWORK_STATE"},{"class":"android.net.ConnectivityManager","api":"getNetworkInfo","permissionText":"Returns connection status information about a particular\n Network.\n\n \n Requires Manifest.permission.ACCESS_NETWORK_STATE"},{"class":"android.net.ConnectivityManager","api":"getNetworkPreference","permissionText":"Retrieves the current preferred network type.\n\n \n Requires Manifest.permission.ACCESS_NETWORK_STATE"},{"class":"android.net.ConnectivityManager","api":"isActiveNetworkMetered","permissionText":"Returns if the currently active data network is metered. A network is\n classified as metered when the user is sensitive to heavy data usage on\n that connection due to monetary costs, data limitations or\n battery/performance issues. You should check this before doing large\n data transfers, and warn the user or delay the operation until another\n network is available.\n\n \n Requires Manifest.permission.ACCESS_NETWORK_STATE"},{"class":"android.net.ConnectivityManager","api":"registerDefaultNetworkCallback","permissionText":"Registers to receive notifications about changes in the system default network. The callbacks\n will continue to be called until either the application exits or\n unregisterNetworkCallback(android.net.ConnectivityManager.NetworkCallback) is called.\n\n \n Requires Manifest.permission.ACCESS_NETWORK_STATE"},{"class":"android.net.ConnectivityManager","api":"registerDefaultNetworkCallback","permissionText":"Registers to receive notifications about changes in the system default network. The callbacks\n will continue to be called until either the application exits or\n unregisterNetworkCallback(android.net.ConnectivityManager.NetworkCallback) is called.\n\n \n Requires Manifest.permission.ACCESS_NETWORK_STATE"},{"class":"android.net.ConnectivityManager","api":"registerNetworkCallback","permissionText":"Registers to receive notifications about all networks which satisfy the given\n NetworkRequest.  The callbacks will continue to be called until\n either the application exits or unregisterNetworkCallback(android.net.ConnectivityManager.NetworkCallback) is\n called.\n\n \n Requires Manifest.permission.ACCESS_NETWORK_STATE"},{"class":"android.net.ConnectivityManager","api":"registerNetworkCallback","permissionText":"The request may be released normally by calling\n unregisterNetworkCallback(android.app.PendingIntent).\n \n Requires Manifest.permission.ACCESS_NETWORK_STATE"},{"class":"android.net.ConnectivityManager","api":"registerNetworkCallback","permissionText":"Registers to receive notifications about all networks which satisfy the given\n NetworkRequest.  The callbacks will continue to be called until\n either the application exits or unregisterNetworkCallback(android.net.ConnectivityManager.NetworkCallback) is\n called.\n\n \n Requires Manifest.permission.ACCESS_NETWORK_STATE"},{"class":"android.net.ConnectivityManager","api":"requestNetwork","permissionText":"This method requires the caller to hold either the\n Manifest.permission.CHANGE_NETWORK_STATE permission\n or the ability to modify system settings as determined by\n Settings.System.canWrite(Context)."},{"class":"android.net.ConnectivityManager","api":"requestNetwork","permissionText":"This method requires the caller to hold either the\n Manifest.permission.CHANGE_NETWORK_STATE permission\n or the ability to modify system settings as determined by\n Settings.System.canWrite(Context)."},{"class":"android.net.ConnectivityManager","api":"requestNetwork","permissionText":"This method requires the caller to hold either the\n Manifest.permission.CHANGE_NETWORK_STATE permission\n or the ability to modify system settings as determined by\n Settings.System.canWrite(Context)."},{"class":"android.net.ConnectivityManager","api":"requestNetwork","permissionText":"This method requires the caller to hold either the\n Manifest.permission.CHANGE_NETWORK_STATE permission\n or the ability to modify system settings as determined by\n Settings.System.canWrite(Context)."},{"class":"android.net.ConnectivityManager","api":"requestNetwork","permissionText":"This method requires the caller to hold either the\n Manifest.permission.CHANGE_NETWORK_STATE permission\n or the ability to modify system settings as determined by\n Settings.System.canWrite(Context)."},{"class":"android.telecom.Connection.VideoProvider","api":"SESSION_EVENT_CAMERA_PERMISSION_ERROR","permissionText":"Session event raised by Telecom when\n InCallService.VideoCall.setCamera(String) is called and the\n caller does not have the necessary Manifest.permission.CAMERA permission."},{"class":"android.companion.CompanionDeviceManager","api":"associate","permissionText":"If your app needs to be excluded from battery optimizations (run in the background)\n or to have unrestricted data access (use data in the background) you can declare that\n you use the Manifest.permission.REQUEST_COMPANION_RUN_IN_BACKGROUND and Manifest.permission.REQUEST_COMPANION_USE_DATA_IN_BACKGROUND respectively. Note that these\n special capabilities have a negative effect on the device's battery and user's data\n usage, therefore you should requested them when absolutely necessary."},{"class":"android.nfc.cardemulation.CardEmulation","api":"isDefaultServiceForAid","permissionText":"Returns\n      \n        boolean\n        whether the service is the default handler for the specified AID\n\n Requires the Manifest.permission.NFC permission."},{"class":"android.nfc.cardemulation.CardEmulation","api":"isDefaultServiceForCategory","permissionText":"Returns\n      \n        boolean\n        whether service is currently the default service for the category.\n\n Requires the Manifest.permission.NFC permission."},{"class":"android.nfc.cardemulation.CardEmulation","api":"setOffHostForService","permissionText":"Registeration will be successful only if the Secure Element\n exists on the device.\n\n \n Requires Manifest.permission.NFC"},{"class":"android.nfc.cardemulation.CardEmulation","api":"unsetOffHostForService","permissionText":"Note that you can only unset off-host SE for a service that\n is running under the same UID as the caller of this API. Typically\n this means you need to call this from the same\n package as the service itself, though UIDs can also\n be shared between packages using shared UIDs.\n\n \n Requires Manifest.permission.NFC"},{"class":"android.hardware.camera2.CaptureResult","api":"LENS_DISTORTION","permissionText":"Permission Manifest.permission.CAMERA is needed to access this property"},{"class":"android.hardware.camera2.CaptureResult","api":"LENS_INTRINSIC_CALIBRATION","permissionText":"Permission Manifest.permission.CAMERA is needed to access this property"},{"class":"android.hardware.camera2.CaptureResult","api":"LENS_POSE_ROTATION","permissionText":"Permission Manifest.permission.CAMERA is needed to access this property"},{"class":"android.hardware.camera2.CaptureResult","api":"LENS_POSE_TRANSLATION","permissionText":"Permission Manifest.permission.CAMERA is needed to access this property"},{"class":"android.hardware.camera2.CaptureResult","api":"LENS_RADIAL_DISTORTION","permissionText":"Permission Manifest.permission.CAMERA is needed to access this property"},{"class":"android.hardware.camera2.CameraManager","api":"openCamera","permissionText":"Manifest.permission.CAMERA"},{"class":"android.hardware.camera2.CameraManager","api":"openCamera","permissionText":"Manifest.permission.CAMERA"},{"class":"android.hardware.camera2.CameraCharacteristics","api":"LENS_DISTORTION","permissionText":"Permission Manifest.permission.CAMERA is needed to access this property"},{"class":"android.hardware.camera2.CameraCharacteristics","api":"LENS_INFO_HYPERFOCAL_DISTANCE","permissionText":"Permission Manifest.permission.CAMERA is needed to access this property"},{"class":"android.hardware.camera2.CameraCharacteristics","api":"LENS_INFO_MINIMUM_FOCUS_DISTANCE","permissionText":"Permission Manifest.permission.CAMERA is needed to access this property"},{"class":"android.hardware.camera2.CameraCharacteristics","api":"LENS_INTRINSIC_CALIBRATION","permissionText":"Permission Manifest.permission.CAMERA is needed to access this property"},{"class":"android.hardware.camera2.CameraCharacteristics","api":"LENS_POSE_REFERENCE","permissionText":"Permission Manifest.permission.CAMERA is needed to access this property"},{"class":"android.hardware.camera2.CameraCharacteristics","api":"LENS_POSE_ROTATION","permissionText":"Permission Manifest.permission.CAMERA is needed to access this property"},{"class":"android.hardware.camera2.CameraCharacteristics","api":"LENS_POSE_TRANSLATION","permissionText":"Permission Manifest.permission.CAMERA is needed to access this property"},{"class":"android.hardware.camera2.CameraCharacteristics","api":"LENS_RADIAL_DISTORTION","permissionText":"Permission Manifest.permission.CAMERA is needed to access this property"},{"class":"android.hardware.camera2.CameraCharacteristics","api":"SENSOR_CALIBRATION_TRANSFORM1","permissionText":"Permission Manifest.permission.CAMERA is needed to access this property"},{"class":"android.hardware.camera2.CameraCharacteristics","api":"SENSOR_CALIBRATION_TRANSFORM2","permissionText":"Permission Manifest.permission.CAMERA is needed to access this property"},{"class":"android.hardware.camera2.CameraCharacteristics","api":"SENSOR_COLOR_TRANSFORM1","permissionText":"Permission Manifest.permission.CAMERA is needed to access this property"},{"class":"android.hardware.camera2.CameraCharacteristics","api":"SENSOR_COLOR_TRANSFORM2","permissionText":"Permission Manifest.permission.CAMERA is needed to access this property"},{"class":"android.hardware.camera2.CameraCharacteristics","api":"SENSOR_FORWARD_MATRIX1","permissionText":"Permission Manifest.permission.CAMERA is needed to access this property"},{"class":"android.hardware.camera2.CameraCharacteristics","api":"SENSOR_FORWARD_MATRIX2","permissionText":"Permission Manifest.permission.CAMERA is needed to access this property"},{"class":"android.hardware.camera2.CameraCharacteristics","api":"SENSOR_REFERENCE_ILLUMINANT1","permissionText":"Permission Manifest.permission.CAMERA is needed to access this property"},{"class":"android.hardware.camera2.CameraCharacteristics","api":"SENSOR_REFERENCE_ILLUMINANT2","permissionText":"Permission Manifest.permission.CAMERA is needed to access this property"},{"class":"android.hardware.camera2.CameraCharacteristics","api":"getKeysNeedingPermission","permissionText":"Returns a subset of the list returned by getKeys() with all keys that\n require camera clients to obtain the Manifest.permission.CAMERA permission."},{"class":"android.os.Build.VERSION_CODES","api":"DONUT","permissionText":"They must explicitly request the\n Manifest.permission.WRITE_EXTERNAL_STORAGE permission to be\n able to modify the contents of the SD card.  (Apps targeting\n earlier versions will always request the permission.)\n  They must explicitly request the\n Manifest.permission.READ_PHONE_STATE permission to be\n able to be able to retrieve phone state info.  (Apps targeting\n earlier versions will always request the permission.)\n  They are assumed to support different screen densities and\n sizes.  (Apps targeting earlier versions are assumed to only support\n medium density normal size screens unless otherwise indicated).\n They can still explicitly specify screen support either way with the\n supports-screens manifest tag.\n  TabHost will use the new dark tab\n background design."},{"class":"android.os.Build.VERSION_CODES","api":"JELLY_BEAN","permissionText":"You must explicitly request the Manifest.permission.READ_CALL_LOG\n and/or Manifest.permission.WRITE_CALL_LOG permissions;\n access to the call log is no longer implicitly provided through\n Manifest.permission.READ_CONTACTS and\n Manifest.permission.WRITE_CONTACTS.\n  RemoteViews will throw an exception if\n setting an onClick handler for views being generated by a\n RemoteViewsService for a collection container;\n previously this just resulted in a warning log message.\n  New ActionBar policy for embedded tabs:\n embedded tabs are now always stacked in the action bar when in portrait\n mode, regardless of the size of the screen.\n  WebSettings.setAllowFileAccessFromFileURLs and\n WebSettings.setAllowUniversalAccessFromFileURLs default to false.\n  Calls to PackageManager.setComponentEnabledSetting will now throw an\n IllegalArgumentException if the given component class name does not\n exist in the application's manifest.\n  NfcAdapter.setNdefPushMessage,\n NfcAdapter.setNdefPushMessageCallback and\n NfcAdapter.setOnNdefPushCompleteCallback will throw\n IllegalStateException if called after the Activity has been destroyed.\n  Accessibility services must require the new\n Manifest.permission.BIND_ACCESSIBILITY_SERVICE permission or\n they will not be available for use.\n  AccessibilityServiceInfo.FLAG_INCLUDE_NOT_IMPORTANT_VIEWS must be set\n for unimportant views to be included in queries."},{"class":"android.os.Build.VERSION_CODES","api":"KITKAT","permissionText":"The default result of\n PreferenceActivity.isValueFragment becomes false instead of true.\n  In WebView, apps targeting earlier versions will have\n JS URLs evaluated directly and any result of the evaluation will not replace\n the current page content.  Apps targetting KITKAT or later that load a JS URL will\n have the result of that URL replace the content of the current page\n  AlarmManager.set becomes interpreted as\n an inexact value, to give the system more flexibility in scheduling alarms.\n  Context.getSharedPreferences no longer allows a null name.\n  RelativeLayout changes to compute wrapped content\n margins correctly.\n  ActionBar's window content overlay is allowed to be\n drawn.\n The Manifest.permission.READ_EXTERNAL_STORAGE\n permission is now always enforced.\n Access to package-specific external storage directories belonging\n to the calling app no longer requires the\n Manifest.permission.READ_EXTERNAL_STORAGE or\n Manifest.permission.WRITE_EXTERNAL_STORAGE\n permissions."},{"class":"android.os.Build.VERSION_CODES","api":"LOLLIPOP","permissionText":"Context.bindService now\n requires an explicit Intent, and will throw an exception if given an implicit\n Intent.\n  Notification.Builder will\n not have the colors of their various notification elements adjusted to better\n match the new material design look.\n  Message will validate that a message is not currently\n in use when it is recycled.\n  Hardware accelerated drawing in windows will be enabled automatically\n in most places.\n  Spinner throws an exception if attaching an\n adapter with more than one item type.\n  If the app is a launcher, the launcher will be available to the user\n even when they are using corporate profiles (which requires that the app\n use LauncherApps to correctly populate its\n apps UI).\n  Calling Service.stopForeground\n with removeNotification false will modify the still posted notification so that\n it is no longer forced to be ongoing.\n  A DreamService must require the\n Manifest.permission.BIND_DREAM_SERVICE permission to be usable."},{"class":"android.os.Build.VERSION_CODES","api":"P","permissionText":"Service.startForeground requires\n that apps hold the permission\n Manifest.permission.FOREGROUND_SERVICE.\n LinearLayout will always remeasure weighted children,\n even if there is no excess space."}]