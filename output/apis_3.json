[
    {
        "class": "android.telephony.euicc.EuiccManager",
        "api": "deleteSubscription",
        "permissionText": "Requires that the calling app has carrier privileges according to the metadata of the\n profile to be deleted, or the\n android.Manifest.permission#WRITE_EMBEDDED_SUBSCRIPTIONS permission.\n\n \n Requires android.Manifest.permission.WRITE_EMBEDDED_SUBSCRIPTIONS"
    },
    {
        "class": "android.telephony.euicc.EuiccManager",
        "api": "downloadSubscription",
        "permissionText": "On a multi-active SIM device, requires the\n android.Manifest.permission#WRITE_EMBEDDED_SUBSCRIPTIONS permission, or a calling app\n only if the targeted eUICC does not currently have an active subscription or the calling app\n is authorized to manage the active subscription on the target eUICC, and the calling app is\n authorized to manage any active subscription on any SIM. Without it, an\n EMBEDDED_SUBSCRIPTION_RESULT_RESOLVABLE_ERROR will be returned in the callback\n intent to prompt the user to accept the download. The caller should also be authorized to\n manage the subscription to be downloaded.\n\n \n Requires android.Manifest.permission.WRITE_EMBEDDED_SUBSCRIPTIONS"
    },
    {
        "class": "android.telephony.euicc.EuiccManager",
        "api": "switchToSubscription",
        "permissionText": "On a multi-active SIM device, requires the\n android.Manifest.permission#WRITE_EMBEDDED_SUBSCRIPTIONS permission, or a calling app\n  only if the targeted eUICC does not currently have an active subscription or the calling app\n is authorized to manage the active subscription on the target eUICC, and the calling app is\n authorized to manage any active subscription on any SIM. Without it, an\n EMBEDDED_SUBSCRIPTION_RESULT_RESOLVABLE_ERROR will be returned in the callback\n intent to prompt the user to accept the download. The caller should also be authorized to\n manage the subscription to be enabled.\n\n \n Requires android.Manifest.permission.WRITE_EMBEDDED_SUBSCRIPTIONS"
    },
    {
        "class": "android.telephony.euicc.EuiccManager",
        "api": "updateSubscriptionNickname",
        "permissionText": "Requires that the calling app has carrier privileges according to the metadata of the\n profile to be updated, or the\n android.Manifest.permission#WRITE_EMBEDDED_SUBSCRIPTIONS permission.\n\n \n Requires android.Manifest.permission.WRITE_EMBEDDED_SUBSCRIPTIONS"
    },
    {
        "class": "android.os.Environment",
        "api": "getExternalStorageDirectory",
        "permissionText": "Writing to this path requires the\n Manifest.permission.WRITE_EXTERNAL_STORAGE permission,\n and starting in Build.VERSION_CODES.KITKAT, read\n access requires the\n Manifest.permission.READ_EXTERNAL_STORAGE permission,\n which is automatically granted if you hold the write permission."
    },
    {
        "class": "android.os.DropBoxManager",
        "api": "ACTION_DROPBOX_ENTRY_ADDED",
        "permissionText": "Broadcast Action: This is broadcast when a new entry is added in the dropbox.\n You must hold the Manifest.permission.READ_LOGS permission\n in order to receive this broadcast. This broadcast can be rate limited for low priority\n entries"
    },
    {
        "class": "android.os.DropBoxManager",
        "api": "getNextEntry",
        "permissionText": "Gets the next entry from the drop box after the specified time.\n You must always call Entry#close() on the return value!\n\n \n Requires Manifest.permission.READ_LOGS and Manifest.permission.PACKAGE_USAGE_STATS"
    },
    {
        "class": "android.app.admin.DevicePolicyManager",
        "api": "ACTION_DEVICE_ADMIN_SERVICE",
        "permissionText": "Service action: Action for a service that device owner and profile owner can optionally\n own.  If a device owner or a profile owner has such a service, the system tries to keep\n a bound connection to it, in order to keep their process always running.\n The service must be protected with the Manifest.permission.BIND_DEVICE_ADMIN\n permission."
    },
    {
        "class": "android.app.admin.DevicePolicyManager",
        "api": "EXTRA_PASSWORD_COMPLEXITY",
        "permissionText": "If an invalid value is used, it will be treated as PASSWORD_COMPLEXITY_NONE.\n \n \n Requires Manifest.permission.REQUEST_PASSWORD_COMPLEXITY"
    },
    {
        "class": "android.app.admin.DevicePolicyManager",
        "api": "EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME",
        "permissionText": "This constant was deprecated\n      in API level 23.\n    Use EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME. This extra is still\n supported, but only if there is only one device admin receiver in the package that requires\n the permission Manifest.permission.BIND_DEVICE_ADMIN."
    },
    {
        "class": "android.app.admin.DevicePolicyManager",
        "api": "bindDeviceAdminServiceAsUser",
        "permissionText": "The service must be protected by Manifest.permission.BIND_DEVICE_ADMIN.\n Note that the Context used to obtain this\n DevicePolicyManager instance via Context#getSystemService(Class) will be used\n to bind to the Service."
    },
    {
        "class": "android.app.admin.DevicePolicyManager",
        "api": "getPasswordComplexity",
        "permissionText": "Note that when called from a profile which uses an unified challenge with its parent, the\n screen lock complexity of the parent will be returned. However, this API does not support\n explicitly querying the parent profile screen lock complexity via getParentProfileInstance(ComponentName).\n\n \n Requires Manifest.permission.REQUEST_PASSWORD_COMPLEXITY"
    },
    {
        "class": "android.app.admin.DevicePolicyManager",
        "api": "setAlwaysOnVpnPackage",
        "permissionText": "declare a VpnService in its manifest, guarded by\n         Manifest.permission.BIND_VPN_SERVICE;\n     target API 24 or above; and\n     not explicitly opt out of the feature through\n         VpnService.SERVICE_META_DATA_SUPPORTS_ALWAYS_ON."
    },
    {
        "class": "android.app.admin.DeviceAdminReceiver",
        "api": "ACTION_DEVICE_ADMIN_ENABLED",
        "permissionText": "This is the primary action that a device administrator must implement to be\n allowed to manage a device.  This will be set to the receiver\n when the user enables it for administration.  You will generally\n handle this in DeviceAdminReceiver#onEnabled(Context, Intent).  To be\n supported, the receiver must also require the\n Manifest.permission.BIND_DEVICE_ADMIN permission so\n that other applications can not abuse it."
    },
    {
        "class": "android.content.ContextWrapper",
        "api": "clearWallpaper",
        "permissionText": "This method requires the caller to hold the permission\n Manifest.permission.SET_WALLPAPER."
    },
    {
        "class": "android.content.ContextWrapper",
        "api": "getExternalCacheDir",
        "permissionText": "The platform does not always monitor the space available in shared\n storage, and thus may not automatically delete these files. Apps should\n always manage the maximum space used in this location. Currently the only\n time files here will be deleted by the platform is when running on\n Build.VERSION_CODES.JELLY_BEAN_MR1 or later and\n Environment#isExternalStorageEmulated(File) returns true.\n Shared storage may not always be available, since removable media can\n be ejected by the user. Media state can be checked using\n Environment#getExternalStorageState(File).\n There is no security enforced with these files. For example, any\n application holding\n Manifest.permission.WRITE_EXTERNAL_STORAGE can write to\n these files."
    },
    {
        "class": "android.content.ContextWrapper",
        "api": "getExternalCacheDirs",
        "permissionText": "The platform does not always monitor the space available in shared\n storage, and thus may not automatically delete these files. Apps should\n always manage the maximum space used in this location. Currently the only\n time files here will be deleted by the platform is when running on\n Build.VERSION_CODES.JELLY_BEAN_MR1 or later and\n Environment#isExternalStorageEmulated(File) returns true.\n Shared storage may not always be available, since removable media can\n be ejected by the user. Media state can be checked using\n Environment#getExternalStorageState(File).\n There is no security enforced with these files. For example, any\n application holding\n Manifest.permission.WRITE_EXTERNAL_STORAGE can write to\n these files."
    },
    {
        "class": "android.content.ContextWrapper",
        "api": "getExternalFilesDir",
        "permissionText": "Shared storage may not always be available, since removable media can\n be ejected by the user. Media state can be checked using\n Environment#getExternalStorageState(File).\n There is no security enforced with these files. For example, any\n application holding\n Manifest.permission.WRITE_EXTERNAL_STORAGE can write to\n these files."
    },
    {
        "class": "android.content.ContextWrapper",
        "api": "getExternalFilesDirs",
        "permissionText": "Shared storage may not always be available, since removable media can\n be ejected by the user. Media state can be checked using\n Environment#getExternalStorageState(File).\n There is no security enforced with these files. For example, any\n application holding\n Manifest.permission.WRITE_EXTERNAL_STORAGE can write to\n these files."
    },
    {
        "class": "android.content.ContextWrapper",
        "api": "getExternalMediaDirs",
        "permissionText": "Shared storage may not always be available, since removable media can\n be ejected by the user. Media state can be checked using\n Environment#getExternalStorageState(File).\n There is no security enforced with these files. For example, any\n application holding\n Manifest.permission.WRITE_EXTERNAL_STORAGE can write to\n these files."
    },
    {
        "class": "android.content.ContextWrapper",
        "api": "getObbDir",
        "permissionText": "Shared storage may not always be available, since removable media can\n be ejected by the user. Media state can be checked using\n Environment#getExternalStorageState(File).\n There is no security enforced with these files. For example, any\n application holding\n Manifest.permission.WRITE_EXTERNAL_STORAGE can write to\n these files."
    },
    {
        "class": "android.content.ContextWrapper",
        "api": "getObbDirs",
        "permissionText": "Shared storage may not always be available, since removable media can\n be ejected by the user. Media state can be checked using\n Environment#getExternalStorageState(File).\n There is no security enforced with these files. For example, any\n application holding\n Manifest.permission.WRITE_EXTERNAL_STORAGE can write to\n these files."
    },
    {
        "class": "android.content.ContextWrapper",
        "api": "removeStickyBroadcast",
        "permissionText": "Remove the data previously sent with sendStickyBroadcast(Intent),\n so that it is as if the sticky broadcast had never happened.\n\n \n Requires Manifest.permission.BROADCAST_STICKY"
    },
    {
        "class": "android.content.ContextWrapper",
        "api": "removeStickyBroadcastAsUser",
        "permissionText": "You must hold the Manifest.permission.BROADCAST_STICKY\n permission in order to use this API.  If you do not hold that\n permission, SecurityException will be thrown.\n\n \n Requires android.Manifest.permission.INTERACT_ACROSS_USERS and Manifest.permission.BROADCAST_STICKY"
    },
    {
        "class": "android.content.ContextWrapper",
        "api": "sendBroadcastAsUser",
        "permissionText": "Version of sendBroadcast(android.content.Intent) that allows you to specify the\n user the broadcast will be sent to.  This is not available to applications\n that are not pre-installed on the system image.\n \n Requires android.Manifest.permission.INTERACT_ACROSS_USERS"
    },
    {
        "class": "android.content.ContextWrapper",
        "api": "sendBroadcastAsUser",
        "permissionText": "Version of sendBroadcast(android.content.Intent, java.lang.String) that allows you to specify the\n user the broadcast will be sent to.  This is not available to applications\n that are not pre-installed on the system image.\n\n \n Requires android.Manifest.permission.INTERACT_ACROSS_USERS"
    },
    {
        "class": "android.content.ContextWrapper",
        "api": "sendOrderedBroadcastAsUser",
        "permissionText": "See BroadcastReceiver for more information on Intent broadcasts.\n\n \n Requires android.Manifest.permission.INTERACT_ACROSS_USERS"
    },
    {
        "class": "android.content.ContextWrapper",
        "api": "sendStickyBroadcast",
        "permissionText": "Perform a sendBroadcast(android.content.Intent) that is \"sticky,\" meaning the\n Intent you are sending stays around after the broadcast is complete,\n so that others can quickly retrieve that data through the return\n value of registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter).  In\n all other ways, this behaves the same as\n sendBroadcast(android.content.Intent).\n\n \n Requires Manifest.permission.BROADCAST_STICKY"
    },
    {
        "class": "android.content.ContextWrapper",
        "api": "sendStickyBroadcastAsUser",
        "permissionText": "Version of sendStickyBroadcast(android.content.Intent) that allows you to specify the\n user the broadcast will be sent to.  This is not available to applications\n that are not pre-installed on the system image.\n\n \n Requires android.Manifest.permission.INTERACT_ACROSS_USERS and Manifest.permission.BROADCAST_STICKY"
    },
    {
        "class": "android.content.ContextWrapper",
        "api": "sendStickyOrderedBroadcast",
        "permissionText": "See BroadcastReceiver for more information on Intent broadcasts.\n\n \n Requires Manifest.permission.BROADCAST_STICKY"
    },
    {
        "class": "android.content.ContextWrapper",
        "api": "sendStickyOrderedBroadcastAsUser",
        "permissionText": "See BroadcastReceiver for more information on Intent broadcasts.\n\n \n Requires android.Manifest.permission.INTERACT_ACROSS_USERS and Manifest.permission.BROADCAST_STICKY"
    },
    {
        "class": "android.content.ContextWrapper",
        "api": "setWallpaper",
        "permissionText": "This method requires the caller to hold the permission\n Manifest.permission.SET_WALLPAPER."
    },
    {
        "class": "android.content.ContextWrapper",
        "api": "setWallpaper",
        "permissionText": "This method requires the caller to hold the permission\n Manifest.permission.SET_WALLPAPER."
    },
    {
        "class": "android.content.Context",
        "api": "clearWallpaper",
        "permissionText": "This method requires the caller to hold the permission\n Manifest.permission.SET_WALLPAPER."
    },
    {
        "class": "android.content.Context",
        "api": "getExternalCacheDir",
        "permissionText": "The platform does not always monitor the space available in shared\n storage, and thus may not automatically delete these files. Apps should\n always manage the maximum space used in this location. Currently the only\n time files here will be deleted by the platform is when running on\n Build.VERSION_CODES.JELLY_BEAN_MR1 or later and\n Environment#isExternalStorageEmulated(File) returns true.\n Shared storage may not always be available, since removable media can\n be ejected by the user. Media state can be checked using\n Environment#getExternalStorageState(File).\n There is no security enforced with these files. For example, any\n application holding\n Manifest.permission.WRITE_EXTERNAL_STORAGE can write to\n these files."
    },
    {
        "class": "android.content.Context",
        "api": "getExternalCacheDirs",
        "permissionText": "The platform does not always monitor the space available in shared\n storage, and thus may not automatically delete these files. Apps should\n always manage the maximum space used in this location. Currently the only\n time files here will be deleted by the platform is when running on\n Build.VERSION_CODES.JELLY_BEAN_MR1 or later and\n Environment#isExternalStorageEmulated(File) returns true.\n Shared storage may not always be available, since removable media can\n be ejected by the user. Media state can be checked using\n Environment#getExternalStorageState(File).\n There is no security enforced with these files. For example, any\n application holding\n Manifest.permission.WRITE_EXTERNAL_STORAGE can write to\n these files."
    },
    {
        "class": "android.content.Context",
        "api": "getExternalFilesDir",
        "permissionText": "Shared storage may not always be available, since removable media can\n be ejected by the user. Media state can be checked using\n Environment#getExternalStorageState(File).\n There is no security enforced with these files. For example, any\n application holding\n Manifest.permission.WRITE_EXTERNAL_STORAGE can write to\n these files."
    },
    {
        "class": "android.content.Context",
        "api": "getExternalFilesDirs",
        "permissionText": "Shared storage may not always be available, since removable media can\n be ejected by the user. Media state can be checked using\n Environment#getExternalStorageState(File).\n There is no security enforced with these files. For example, any\n application holding\n Manifest.permission.WRITE_EXTERNAL_STORAGE can write to\n these files."
    },
    {
        "class": "android.content.Context",
        "api": "getExternalMediaDirs",
        "permissionText": "Shared storage may not always be available, since removable media can\n be ejected by the user. Media state can be checked using\n Environment#getExternalStorageState(File).\n There is no security enforced with these files. For example, any\n application holding\n Manifest.permission.WRITE_EXTERNAL_STORAGE can write to\n these files."
    },
    {
        "class": "android.content.Context",
        "api": "getObbDir",
        "permissionText": "Shared storage may not always be available, since removable media can\n be ejected by the user. Media state can be checked using\n Environment#getExternalStorageState(File).\n There is no security enforced with these files. For example, any\n application holding\n Manifest.permission.WRITE_EXTERNAL_STORAGE can write to\n these files."
    },
    {
        "class": "android.content.Context",
        "api": "getObbDirs",
        "permissionText": "Shared storage may not always be available, since removable media can\n be ejected by the user. Media state can be checked using\n Environment#getExternalStorageState(File).\n There is no security enforced with these files. For example, any\n application holding\n Manifest.permission.WRITE_EXTERNAL_STORAGE can write to\n these files."
    },
    {
        "class": "android.content.Context",
        "api": "removeStickyBroadcast",
        "permissionText": "Remove the data previously sent with sendStickyBroadcast(Intent),\n so that it is as if the sticky broadcast had never happened.\n\n \n Requires Manifest.permission.BROADCAST_STICKY"
    },
    {
        "class": "android.content.Context",
        "api": "removeStickyBroadcastAsUser",
        "permissionText": "You must hold the Manifest.permission.BROADCAST_STICKY\n permission in order to use this API.  If you do not hold that\n permission, SecurityException will be thrown.\n\n \n Requires android.Manifest.permission.INTERACT_ACROSS_USERS and Manifest.permission.BROADCAST_STICKY"
    },
    {
        "class": "android.content.Context",
        "api": "sendBroadcastAsUser",
        "permissionText": "Version of sendBroadcast(android.content.Intent) that allows you to specify the\n user the broadcast will be sent to.  This is not available to applications\n that are not pre-installed on the system image.\n \n Requires android.Manifest.permission.INTERACT_ACROSS_USERS"
    },
    {
        "class": "android.content.Context",
        "api": "sendBroadcastAsUser",
        "permissionText": "Version of sendBroadcast(android.content.Intent, java.lang.String) that allows you to specify the\n user the broadcast will be sent to.  This is not available to applications\n that are not pre-installed on the system image.\n\n \n Requires android.Manifest.permission.INTERACT_ACROSS_USERS"
    },
    {
        "class": "android.content.Context",
        "api": "sendOrderedBroadcastAsUser",
        "permissionText": "See BroadcastReceiver for more information on Intent broadcasts.\n\n \n Requires android.Manifest.permission.INTERACT_ACROSS_USERS"
    },
    {
        "class": "android.content.Context",
        "api": "sendStickyBroadcast",
        "permissionText": "Perform a sendBroadcast(android.content.Intent) that is \"sticky,\" meaning the\n Intent you are sending stays around after the broadcast is complete,\n so that others can quickly retrieve that data through the return\n value of registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter).  In\n all other ways, this behaves the same as\n sendBroadcast(android.content.Intent).\n\n \n Requires Manifest.permission.BROADCAST_STICKY"
    },
    {
        "class": "android.content.Context",
        "api": "sendStickyBroadcastAsUser",
        "permissionText": "Version of sendStickyBroadcast(android.content.Intent) that allows you to specify the\n user the broadcast will be sent to.  This is not available to applications\n that are not pre-installed on the system image.\n\n \n Requires android.Manifest.permission.INTERACT_ACROSS_USERS and Manifest.permission.BROADCAST_STICKY"
    },
    {
        "class": "android.content.Context",
        "api": "sendStickyOrderedBroadcast",
        "permissionText": "See BroadcastReceiver for more information on Intent broadcasts.\n\n \n Requires Manifest.permission.BROADCAST_STICKY"
    },
    {
        "class": "android.content.Context",
        "api": "sendStickyOrderedBroadcastAsUser",
        "permissionText": "See BroadcastReceiver for more information on Intent broadcasts.\n\n \n Requires android.Manifest.permission.INTERACT_ACROSS_USERS and Manifest.permission.BROADCAST_STICKY"
    },
    {
        "class": "android.content.Context",
        "api": "setWallpaper",
        "permissionText": "This method requires the caller to hold the permission\n Manifest.permission.SET_WALLPAPER."
    },
    {
        "class": "android.content.Context",
        "api": "setWallpaper",
        "permissionText": "This method requires the caller to hold the permission\n Manifest.permission.SET_WALLPAPER."
    },
    {
        "class": "android.content.ContentResolver",
        "api": "addPeriodicSync",
        "permissionText": "This method requires the caller to hold the permission\n Manifest.permission.WRITE_SYNC_SETTINGS."
    },
    {
        "class": "android.content.ContentResolver",
        "api": "cancelSync",
        "permissionText": "If a periodic sync is specified, the caller must hold the permission\n     Manifest.permission.WRITE_SYNC_SETTINGS."
    },
    {
        "class": "android.content.ContentResolver",
        "api": "getCurrentSync",
        "permissionText": "This method requires the caller to hold the permission\n Manifest.permission.READ_SYNC_STATS."
    },
    {
        "class": "android.content.ContentResolver",
        "api": "getCurrentSyncs",
        "permissionText": "This method requires the caller to hold the permission\n Manifest.permission.READ_SYNC_STATS."
    },
    {
        "class": "android.content.ContentResolver",
        "api": "getIsSyncable",
        "permissionText": "This method requires the caller to hold the permission\n Manifest.permission.READ_SYNC_SETTINGS."
    },
    {
        "class": "android.content.ContentResolver",
        "api": "getMasterSyncAutomatically",
        "permissionText": "This method requires the caller to hold the permission\n Manifest.permission.READ_SYNC_SETTINGS."
    },
    {
        "class": "android.content.ContentResolver",
        "api": "getPeriodicSyncs",
        "permissionText": "This method requires the caller to hold the permission\n Manifest.permission.READ_SYNC_SETTINGS."
    },
    {
        "class": "android.content.ContentResolver",
        "api": "getSyncAutomatically",
        "permissionText": "This method requires the caller to hold the permission\n Manifest.permission.READ_SYNC_SETTINGS."
    },
    {
        "class": "android.content.ContentResolver",
        "api": "isSyncActive",
        "permissionText": "This method requires the caller to hold the permission\n Manifest.permission.READ_SYNC_STATS."
    },
    {
        "class": "android.content.ContentResolver",
        "api": "isSyncPending",
        "permissionText": "This method requires the caller to hold the permission\n Manifest.permission.READ_SYNC_STATS."
    },
    {
        "class": "android.content.ContentResolver",
        "api": "removePeriodicSync",
        "permissionText": "This method requires the caller to hold the permission\n Manifest.permission.WRITE_SYNC_SETTINGS."
    },
    {
        "class": "android.content.ContentResolver",
        "api": "setIsSyncable",
        "permissionText": "This method requires the caller to hold the permission\n Manifest.permission.WRITE_SYNC_SETTINGS."
    },
    {
        "class": "android.content.ContentResolver",
        "api": "setMasterSyncAutomatically",
        "permissionText": "This method requires the caller to hold the permission\n Manifest.permission.WRITE_SYNC_SETTINGS."
    },
    {
        "class": "android.content.ContentResolver",
        "api": "setSyncAutomatically",
        "permissionText": "This method requires the caller to hold the permission\n Manifest.permission.WRITE_SYNC_SETTINGS."
    }
]