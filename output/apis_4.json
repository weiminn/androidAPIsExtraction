[
    {
        "class": "android.app.job.JobInfo.Builder",
        "api": "setPersisted",
        "permissionText": "Set whether or not to persist this job across device reboots.\n\n \n Requires Manifest.permission.RECEIVE_BOOT_COMPLETED"
    },
    {
        "class": "android.nfc.tech.IsoDep",
        "api": "close",
        "permissionText": "Requires the Manifest.permission.NFC permission."
    },
    {
        "class": "android.nfc.tech.IsoDep",
        "api": "connect",
        "permissionText": "Requires the Manifest.permission.NFC permission."
    },
    {
        "class": "android.nfc.tech.IsoDep",
        "api": "getTimeout",
        "permissionText": "Requires the Manifest.permission.NFC permission."
    },
    {
        "class": "android.nfc.tech.IsoDep",
        "api": "setTimeout",
        "permissionText": "Requires the Manifest.permission.NFC permission."
    },
    {
        "class": "android.nfc.tech.IsoDep",
        "api": "transceive",
        "permissionText": "Requires the Manifest.permission.NFC permission."
    },
    {
        "class": "android.content.Intent",
        "api": "ACTION_BOOT_COMPLETED",
        "permissionText": "Broadcast Action: This is broadcast once, after the user has finished\n booting. It can be used to perform application-specific initialization,\n such as installing alarms. You must hold the\n Manifest.permission.RECEIVE_BOOT_COMPLETED permission in\n order to receive this broadcast."
    },
    {
        "class": "android.content.Intent",
        "api": "ACTION_CALL",
        "permissionText": "Note: if you app targets M\n and above and declares as using the Manifest.permission.CALL_PHONE\n permission which is not granted, then attempting to use this action will\n result in a SecurityException."
    },
    {
        "class": "android.content.Intent",
        "api": "ACTION_INSTALL_PACKAGE",
        "permissionText": "Note:If your app is targeting API level higher than 25 you\n need to hold Manifest.permission.REQUEST_INSTALL_PACKAGES\n in order to launch the application installer."
    },
    {
        "class": "android.content.Intent",
        "api": "ACTION_LOCKED_BOOT_COMPLETED",
        "permissionText": "Broadcast Action: This is broadcast once, after the user has finished\n booting, but while still in the \"locked\" state. It can be used to perform\n application-specific initialization, such as installing alarms. You must\n hold the Manifest.permission.RECEIVE_BOOT_COMPLETED\n permission in order to receive this broadcast."
    },
    {
        "class": "android.content.Intent",
        "api": "ACTION_NEW_OUTGOING_CALL",
        "permissionText": "You must hold the\n Manifest.permission.PROCESS_OUTGOING_CALLS\n permission to receive this Intent."
    },
    {
        "class": "android.content.Intent",
        "api": "ACTION_UNINSTALL_PACKAGE",
        "permissionText": "Requires Manifest.permission.REQUEST_DELETE_PACKAGES\n since Build.VERSION_CODES#P."
    },
    {
        "class": "android.content.Intent",
        "api": "ACTION_VIEW_PERMISSION_USAGE",
        "permissionText": "Manifest.permission.START_VIEW_PERMISSION_USAGE"
    },
    {
        "class": "android.inputmethodservice.InputMethodService",
        "api": "android:imeExtractEnterAnimation",
        "permissionText": "Inherited methods\n\n\n\n\n  \n    From class\n      \n        \n          android.inputmethodservice.AbstractInputMethodService\n        \n      \n    \n    \n      \n\n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      dump(FileDescriptor fd, PrintWriter fout, String[] args)\n      \n      \n        Implement this to handle Binder.dump()\n calls on your input method.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        KeyEvent.DispatcherState\n    \n  \n    \n      \n      getKeyDispatcherState()\n      \n      \n        Return the global KeyEvent.DispatcherState\n for used for processing events from the target application.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        IBinder\n    \n  \n    \n      \n      onBind(Intent intent)\n      \n      \n        Return the communication channel to the service.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        AbstractInputMethodService.AbstractInputMethodImpl\n    \n  \n    \n      \n      onCreateInputMethodInterface()\n      \n      \n        Called by the framework during initialization, when the InputMethod\n interface for this service needs to be created.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        AbstractInputMethodService.AbstractInputMethodSessionImpl\n    \n  \n    \n      \n      onCreateInputMethodSessionInterface()\n      \n      \n        Called by the framework when a new InputMethodSession interface is\n needed for a new client of the input method.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      onGenericMotionEvent(MotionEvent event)\n      \n      \n        Implement this to handle generic motion events on your input method.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      onTrackballEvent(MotionEvent event)\n      \n      \n        Implement this to handle trackball events on your input method.\n        \n    \n\n      \n    \n  \n  \n\n\n    \n  \n\n\n\n\n\n\n  \n    From class\n      \n        \n          android.app.Service\n        \n      \n    \n    \n      \n\n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      dump(FileDescriptor fd, PrintWriter writer, String[] args)\n      \n      \n        Print the Service's state into the given stream.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        Application\n    \n  \n    \n      \n      getApplication()\n      \n      \n        Return the application that owns this service.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        int\n    \n  \n    \n      \n      getForegroundServiceType()\n      \n      \n        If the service has become a foreground service by calling\n startForeground(int, android.app.Notification)\n or startForeground(int, android.app.Notification, int), getForegroundServiceType()\n returns the current foreground service type.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        IBinder\n    \n  \n    \n      \n      onBind(Intent intent)\n      \n      \n        Return the communication channel to the service.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      onConfigurationChanged(Configuration newConfig)\n      \n      \n        Called by the system when the device configuration changes while your\n component is running.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      onCreate()\n      \n      \n        Called by the system when the service is first created.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      onDestroy()\n      \n      \n        Called by the system to notify a Service that it is no longer used and is being removed.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      onLowMemory()\n      \n      \n        This is called when the overall system is running low on memory, and\n actively running processes should trim their memory usage.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      onRebind(Intent intent)\n      \n      \n        Called when new clients have connected to the service, after it had\n previously been notified that all had disconnected in its\n onUnbind(Intent).\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      onStart(Intent intent, int startId)\n      \n      \n        \n      This method was deprecated\n      in API level 15.\n    Implement onStartCommand(android.content.Intent, int, int) instead.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      onStartCommand(Intent intent, int flags, int startId)\n      \n      \n        Called by the system every time a client explicitly starts the service by calling\n Context.startService(Intent), providing the arguments it supplied and a\n unique integer token representing the start request.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      onTaskRemoved(Intent rootIntent)\n      \n      \n        This is called if the service is currently running and the user has\n removed a task that comes from the service's application.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      onTrimMemory(int level)\n      \n      \n        Called when the operating system has determined that it is a good\n time for a process to trim unneeded memory from its process.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      onUnbind(Intent intent)\n      \n      \n        Called when all clients have disconnected from a particular interface\n published by the service.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        void\n    \n  \n    \n      \n      startForeground(int id, Notification notification)\n      \n      \n        If your service is started (running through Context#startService(Intent)), then\n also make this service run in the foreground, supplying the ongoing\n notification to be shown to the user while in this state.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        void\n    \n  \n    \n      \n      startForeground(int id, Notification notification, int foregroundServiceType)\n      \n      \n        An overloaded version of startForeground(int, android.app.Notification) with additional\n foregroundServiceType parameter.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        void\n    \n  \n    \n      \n      stopForeground(int flags)\n      \n      \n        Remove this service from foreground state, allowing it to be killed if\n more memory is needed.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        void\n    \n  \n    \n      \n      stopForeground(boolean removeNotification)\n      \n      \n        Synonym for stopForeground(int).\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        void\n    \n  \n    \n      \n      stopSelf()\n      \n      \n        Stop the service, if it was previously started.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        void\n    \n  \n    \n      \n      stopSelf(int startId)\n      \n      \n        Old version of stopSelfResult(int) that doesn't return a result.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        boolean\n    \n  \n    \n      \n      stopSelfResult(int startId)\n      \n      \n        Stop the service if the most recent time it was started was\n startId.\n        \n    \n\n      \n    \n  \n  \n\n\n    \n  \n\n\n\n\n\n\n  \n    From class\n      \n        \n          android.content.ContextWrapper\n        \n      \n    \n    \n      \n\n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      attachBaseContext(Context base)\n      \n      \n        Set the base context for this ContextWrapper.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      bindIsolatedService(Intent service, int flags, String instanceName, Executor executor, ServiceConnection conn)\n      \n      \n        Variation of bindService(Intent, ServiceConnection, int) that, in the specific case of isolated\n services, allows the caller to generate multiple instances of a service\n from a single component declaration.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      bindService(Intent service, int flags, Executor executor, ServiceConnection conn)\n      \n      \n        Same as bindService(android.content.Intent, android.content.ServiceConnection, int) with executor to control\n ServiceConnection callbacks.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      bindService(Intent service, ServiceConnection conn, int flags)\n      \n      \n        Connect to an application service, creating it if needed.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkCallingOrSelfPermission(String permission)\n      \n      \n        Determine whether the calling process of an IPC or you have been\n granted a particular permission.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkCallingOrSelfUriPermission(Uri uri, int modeFlags)\n      \n      \n        Determine whether the calling process of an IPC or you has been granted\n permission to access a specific URI.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkCallingPermission(String permission)\n      \n      \n        Determine whether the calling process of an IPC you are handling has been\n granted a particular permission.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkCallingUriPermission(Uri uri, int modeFlags)\n      \n      \n        Determine whether the calling process and user ID has been\n granted permission to access a specific URI.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkPermission(String permission, int pid, int uid)\n      \n      \n        Determine whether the given permission is allowed for a particular\n process and user ID running in the system.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkSelfPermission(String permission)\n      \n      \n        Determine whether you have been granted a particular permission.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid, int modeFlags)\n      \n      \n        Check both a Uri and normal permission.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkUriPermission(Uri uri, int pid, int uid, int modeFlags)\n      \n      \n        Determine whether a particular process and user ID has been granted\n permission to access a specific URI.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      clearWallpaper()\n      \n      \n        \n      This method is deprecated.\n    Use WallpaperManager.clear() instead.\n This method requires the caller to hold the permission\n Manifest.permission.SET_WALLPAPER.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Context\n    \n  \n    \n      \n      createConfigurationContext(Configuration overrideConfiguration)\n      \n      \n        Return a new Context object for the current Context but whose resources\n are adjusted to match the given Configuration.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Context\n    \n  \n    \n      \n      createDeviceProtectedStorageContext()\n      \n      \n        Return a new Context object for the current Context but whose storage\n APIs are backed by device-protected storage.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Context\n    \n  \n    \n      \n      createDisplayContext(Display display)\n      \n      \n        Return a new Context object for the current Context but whose resources\n are adjusted to match the metrics of the given Display.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Context\n    \n  \n    \n      \n      createPackageContext(String packageName, int flags)\n      \n      \n        Return a new Context object for the given application name.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        String[]\n    \n  \n    \n      \n      databaseList()\n      \n      \n        Returns an array of strings naming the private databases associated with\n this Context's application package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      deleteDatabase(String name)\n      \n      \n        Delete an existing private SQLiteDatabase associated with this Context's\n application package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      deleteFile(String name)\n      \n      \n        Delete the given private file associated with this Context's\n application package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      deleteSharedPreferences(String name)\n      \n      \n        Delete an existing shared preferences file.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      enforceCallingOrSelfPermission(String permission, String message)\n      \n      \n        If neither you nor the calling process of an IPC you are\n handling has been granted a particular permission, throw a\n SecurityException.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      enforceCallingOrSelfUriPermission(Uri uri, int modeFlags, String message)\n      \n      \n        If the calling process of an IPC or you has not been\n granted permission to access a specific URI, throw SecurityException.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      enforceCallingPermission(String permission, String message)\n      \n      \n        If the calling process of an IPC you are handling has not been\n granted a particular permission, throw a SecurityException.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      enforceCallingUriPermission(Uri uri, int modeFlags, String message)\n      \n      \n        If the calling process and user ID has not been granted\n permission to access a specific URI, throw SecurityException.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      enforcePermission(String permission, int pid, int uid, String message)\n      \n      \n        If the given permission is not allowed for a particular process\n and user ID running in the system, throw a SecurityException.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      enforceUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid, int modeFlags, String message)\n      \n      \n        Enforce both a Uri and normal permission.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      enforceUriPermission(Uri uri, int pid, int uid, int modeFlags, String message)\n      \n      \n        If a particular process and user ID has not been granted\n permission to access a specific URI, throw SecurityException.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        String[]\n    \n  \n    \n      \n      fileList()\n      \n      \n        Returns an array of strings naming the private files associated with\n this Context's application package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Context\n    \n  \n    \n      \n      getApplicationContext()\n      \n      \n        Return the context of the single, global Application object of the\n current process.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        ApplicationInfo\n    \n  \n    \n      \n      getApplicationInfo()\n      \n      \n        Return the full application info for this context's package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        AssetManager\n    \n  \n    \n      \n      getAssets()\n      \n      \n        Returns an AssetManager instance for the application's package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Context\n    \n  \n    \n      \n      getBaseContext()\n      \n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getCacheDir()\n      \n      \n        Returns the absolute path to the application specific cache directory on\n the filesystem.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        ClassLoader\n    \n  \n    \n      \n      getClassLoader()\n      \n      \n        Return a class loader you can use to retrieve classes in this package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getCodeCacheDir()\n      \n      \n        Returns the absolute path to the application specific cache directory on\n the filesystem designed for storing cached code.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        ContentResolver\n    \n  \n    \n      \n      getContentResolver()\n      \n      \n        Return a ContentResolver instance for your application's package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getDataDir()\n      \n      \n        Returns the absolute path to the directory on the filesystem where all\n private files belonging to this app are stored.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getDatabasePath(String name)\n      \n      \n        Returns the absolute path on the filesystem where a database created with\n openOrCreateDatabase(String, int, SQLiteDatabase.CursorFactory) is stored.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getDir(String name, int mode)\n      \n      \n        Retrieve, creating if needed, a new directory in which the application\n can place its own custom data files.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getExternalCacheDir()\n      \n      \n        Returns absolute path to application-specific directory on the primary\n shared/external storage device where the application can place cache\n files it owns.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File[]\n    \n  \n    \n      \n      getExternalCacheDirs()\n      \n      \n        Returns absolute paths to application-specific directories on all\n shared/external storage devices where the application can place cache\n files it owns.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getExternalFilesDir(String type)\n      \n      \n        Returns the absolute path to the directory on the primary shared/external\n storage device where the application can place persistent files it owns.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File[]\n    \n  \n    \n      \n      getExternalFilesDirs(String type)\n      \n      \n        Returns absolute paths to application-specific directories on all\n shared/external storage devices where the application can place\n persistent files it owns.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File[]\n    \n  \n    \n      \n      getExternalMediaDirs()\n      \n      \n        Returns absolute paths to application-specific directories on all\n shared/external storage devices where the application can place media\n files.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getFileStreamPath(String name)\n      \n      \n        Returns the absolute path on the filesystem where a file created with\n openFileOutput(String, int) is stored.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getFilesDir()\n      \n      \n        Returns the absolute path to the directory on the filesystem where files\n created with openFileOutput(String, int) are stored.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Executor\n    \n  \n    \n      \n      getMainExecutor()\n      \n      \n        Return an Executor that will run enqueued tasks on the main\n thread associated with this context.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Looper\n    \n  \n    \n      \n      getMainLooper()\n      \n      \n        Return the Looper for the main thread of the current process.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getNoBackupFilesDir()\n      \n      \n        Returns the absolute path to the directory on the filesystem similar to\n getFilesDir().\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getObbDir()\n      \n      \n        Return the primary shared/external storage directory where this\n application's OBB files (if there are any) can be found.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File[]\n    \n  \n    \n      \n      getObbDirs()\n      \n      \n        Returns absolute paths to application-specific directories on all\n shared/external storage devices where the application's OBB files (if\n there are any) can be found.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        String\n    \n  \n    \n      \n      getPackageCodePath()\n      \n      \n        Return the full path to this context's primary Android package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        PackageManager\n    \n  \n    \n      \n      getPackageManager()\n      \n      \n        Return PackageManager instance to find global package information.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        String\n    \n  \n    \n      \n      getPackageName()\n      \n      \n        Return the name of this application's package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        String\n    \n  \n    \n      \n      getPackageResourcePath()\n      \n      \n        Return the full path to this context's primary Android package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Resources\n    \n  \n    \n      \n      getResources()\n      \n      \n        Returns a Resources instance for the application's package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        SharedPreferences\n    \n  \n    \n      \n      getSharedPreferences(String name, int mode)\n      \n      \n        Retrieve and hold the contents of the preferences file 'name', returning\n a SharedPreferences through which you can retrieve and modify its\n values.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Object\n    \n  \n    \n      \n      getSystemService(String name)\n      \n      \n        Return the handle to a system-level service by name.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        String\n    \n  \n    \n      \n      getSystemServiceName(Class<?> serviceClass)\n      \n      \n        Gets the name of the system-level service that is represented by the specified class.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Resources.Theme\n    \n  \n    \n      \n      getTheme()\n      \n      \n        Return the Theme object associated with this Context.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Drawable\n    \n  \n    \n      \n      getWallpaper()\n      \n      \n        \n      This method is deprecated.\n    Use WallpaperManager.get() instead.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      getWallpaperDesiredMinimumHeight()\n      \n      \n        \n      This method is deprecated.\n    Use WallpaperManager.getDesiredMinimumHeight() instead.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      getWallpaperDesiredMinimumWidth()\n      \n      \n        \n      This method is deprecated.\n    Use WallpaperManager.getDesiredMinimumWidth() instead.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      grantUriPermission(String toPackage, Uri uri, int modeFlags)\n      \n      \n        Grant permission to access a specific Uri to another package, regardless\n of whether that package has general permission to access the Uri's\n content provider.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      isDeviceProtectedStorage()\n      \n      \n        Indicates if the storage APIs of this Context are backed by\n device-protected storage.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      isRestricted()\n      \n      \n        Indicates whether this Context is restricted.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      moveDatabaseFrom(Context sourceContext, String name)\n      \n      \n        Move an existing database file from the given source storage context to\n this context.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      moveSharedPreferencesFrom(Context sourceContext, String name)\n      \n      \n        Move an existing shared preferences file from the given source storage\n context to this context.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        FileInputStream\n    \n  \n    \n      \n      openFileInput(String name)\n      \n      \n        Open a private file associated with this Context's application package\n for reading.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        FileOutputStream\n    \n  \n    \n      \n      openFileOutput(String name, int mode)\n      \n      \n        Open a private file associated with this Context's application package\n for writing.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        SQLiteDatabase\n    \n  \n    \n      \n      openOrCreateDatabase(String name, int mode, SQLiteDatabase.CursorFactory factory, DatabaseErrorHandler errorHandler)\n      \n      \n        Open a new private SQLiteDatabase associated with this Context's\n application package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        SQLiteDatabase\n    \n  \n    \n      \n      openOrCreateDatabase(String name, int mode, SQLiteDatabase.CursorFactory factory)\n      \n      \n        Open a new private SQLiteDatabase associated with this Context's\n application package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Drawable\n    \n  \n    \n      \n      peekWallpaper()\n      \n      \n        \n      This method is deprecated.\n    Use WallpaperManager.peek() instead.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Intent\n    \n  \n    \n      \n      registerReceiver(BroadcastReceiver receiver, IntentFilter filter)\n      \n      \n        Register a BroadcastReceiver to be run in the main activity thread.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Intent\n    \n  \n    \n      \n      registerReceiver(BroadcastReceiver receiver, IntentFilter filter, int flags)\n      \n      \n        Register to receive intent broadcasts, with the receiver optionally being\n exposed to Instant Apps.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Intent\n    \n  \n    \n      \n      registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler, int flags)\n      \n      \n        Register to receive intent broadcasts, to run in the context of\n scheduler.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Intent\n    \n  \n    \n      \n      registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler)\n      \n      \n        Register to receive intent broadcasts, to run in the context of\n scheduler.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      removeStickyBroadcast(Intent intent)\n      \n      \n        \n      This method is deprecated.\n    Sticky broadcasts should not be used.  They provide no security (anyone\n can access them), no protection (anyone can modify them), and many other problems.\n The recommended pattern is to use a non-sticky broadcast to report that something\n has changed, with another mechanism for apps to retrieve the current value whenever\n desired.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      removeStickyBroadcastAsUser(Intent intent, UserHandle user)\n      \n      \n        \n      This method is deprecated.\n    Sticky broadcasts should not be used.  They provide no security (anyone\n can access them), no protection (anyone can modify them), and many other problems.\n The recommended pattern is to use a non-sticky broadcast to report that something\n has changed, with another mechanism for apps to retrieve the current value whenever\n desired.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      revokeUriPermission(Uri uri, int modeFlags)\n      \n      \n        Remove all permissions to access a particular content provider Uri\n that were previously added with grantUriPermission(String, Uri, int) or any other mechanism.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      revokeUriPermission(String targetPackage, Uri uri, int modeFlags)\n      \n      \n        Remove permissions to access a particular content provider Uri\n that were previously added with grantUriPermission(String, Uri, int) for a specific target\n package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendBroadcast(Intent intent, String receiverPermission)\n      \n      \n        Broadcast the given intent to all interested BroadcastReceivers, allowing\n an optional required permission to be enforced.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendBroadcast(Intent intent)\n      \n      \n        Broadcast the given intent to all interested BroadcastReceivers.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendBroadcastAsUser(Intent intent, UserHandle user)\n      \n      \n        Version of sendBroadcast(android.content.Intent) that allows you to specify the\n user the broadcast will be sent to.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission)\n      \n      \n        Version of sendBroadcast(android.content.Intent, java.lang.String) that allows you to specify the\n user the broadcast will be sent to.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendOrderedBroadcast(Intent intent, String receiverPermission, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)\n      \n      \n        Version of sendBroadcast(android.content.Intent) that allows you to\n receive data back from the broadcast.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendOrderedBroadcast(Intent intent, String receiverPermission)\n      \n      \n        Broadcast the given intent to all interested BroadcastReceivers, delivering\n them one at a time to allow more preferred receivers to consume the\n broadcast before it is delivered to less preferred receivers.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendOrderedBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)\n      \n      \n        Version of\n sendOrderedBroadcast(android.content.Intent, java.lang.String, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)\n that allows you to specify the\n user the broadcast will be sent to.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendStickyBroadcast(Intent intent)\n      \n      \n        \n      This method is deprecated.\n    Sticky broadcasts should not be used.  They provide no security (anyone\n can access them), no protection (anyone can modify them), and many other problems.\n The recommended pattern is to use a non-sticky broadcast to report that something\n has changed, with another mechanism for apps to retrieve the current value whenever\n desired.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendStickyBroadcastAsUser(Intent intent, UserHandle user)\n      \n      \n        \n      This method is deprecated.\n    Sticky broadcasts should not be used.  They provide no security (anyone\n can access them), no protection (anyone can modify them), and many other problems.\n The recommended pattern is to use a non-sticky broadcast to report that something\n has changed, with another mechanism for apps to retrieve the current value whenever\n desired.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendStickyOrderedBroadcast(Intent intent, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)\n      \n      \n        \n      This method is deprecated.\n    Sticky broadcasts should not be used.  They provide no security (anyone\n can access them), no protection (anyone can modify them), and many other problems.\n The recommended pattern is to use a non-sticky broadcast to report that something\n has changed, with another mechanism for apps to retrieve the current value whenever\n desired.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendStickyOrderedBroadcastAsUser(Intent intent, UserHandle user, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)\n      \n      \n        \n      This method is deprecated.\n    Sticky broadcasts should not be used.  They provide no security (anyone\n can access them), no protection (anyone can modify them), and many other problems.\n The recommended pattern is to use a non-sticky broadcast to report that something\n has changed, with another mechanism for apps to retrieve the current value whenever\n desired.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      setTheme(int resid)\n      \n      \n        Set the base theme for this context.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      setWallpaper(Bitmap bitmap)\n      \n      \n        \n      This method is deprecated.\n    Use WallpaperManager.set() instead.\n This method requires the caller to hold the permission\n Manifest.permission.SET_WALLPAPER.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      setWallpaper(InputStream data)\n      \n      \n        \n      This method is deprecated.\n    Use WallpaperManager.set() instead.\n This method requires the caller to hold the permission\n Manifest.permission.SET_WALLPAPER.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      startActivities(Intent[] intents, Bundle options)\n      \n      \n        Launch multiple new activities.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      startActivities(Intent[] intents)\n      \n      \n        Same as startActivities(android.content.Intent[], android.os.Bundle) with no options\n specified.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      startActivity(Intent intent)\n      \n      \n        Same as startActivity(android.content.Intent, android.os.Bundle) with no options\n specified.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      startActivity(Intent intent, Bundle options)\n      \n      \n        Launch a new activity.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        ComponentName\n    \n  \n    \n      \n      startForegroundService(Intent service)\n      \n      \n        Similar to startService(android.content.Intent), but with an implicit promise that the\n Service will call startForeground(int, android.app.Notification) once it begins running.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      startInstrumentation(ComponentName className, String profileFile, Bundle arguments)\n      \n      \n        Start executing an Instrumentation class.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      startIntentSender(IntentSender intent, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags)\n      \n      \n        Same as startIntentSender(android.content.IntentSender, android.content.Intent, int, int, int, android.os.Bundle)\n with no options specified.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      startIntentSender(IntentSender intent, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options)\n      \n      \n        Like startActivity(android.content.Intent, android.os.Bundle), but taking a IntentSender\n to start.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        ComponentName\n    \n  \n    \n      \n      startService(Intent service)\n      \n      \n        Request that a given application service be started.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      stopService(Intent name)\n      \n      \n        Request that a given application service be stopped.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      unbindService(ServiceConnection conn)\n      \n      \n        Disconnect from an application service.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      unregisterReceiver(BroadcastReceiver receiver)\n      \n      \n        Unregister a previously registered BroadcastReceiver.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      updateServiceGroup(ServiceConnection conn, int group, int importance)\n      \n      \n        For a service previously bound with bindService(Intent, ServiceConnection, int) or a related method, change\n how the system manages that service's process in relation to other processes.\n        \n    \n\n      \n    \n  \n  \n\n\n    \n  \n\n\n\n\n\n\n  \n    From class\n      \n        \n          android.content.Context\n        \n      \n    \n    \n      \n\n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      bindIsolatedService(Intent service, int flags, String instanceName, Executor executor, ServiceConnection conn)\n      \n      \n        Variation of bindService(Intent, ServiceConnection, int) that, in the specific case of isolated\n services, allows the caller to generate multiple instances of a service\n from a single component declaration.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      bindService(Intent service, int flags, Executor executor, ServiceConnection conn)\n      \n      \n        Same as bindService(android.content.Intent, android.content.ServiceConnection, int) with executor to control\n ServiceConnection callbacks.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      bindService(Intent service, ServiceConnection conn, int flags)\n      \n      \n        Connect to an application service, creating it if needed.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkCallingOrSelfPermission(String permission)\n      \n      \n        Determine whether the calling process of an IPC or you have been\n granted a particular permission.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkCallingOrSelfUriPermission(Uri uri, int modeFlags)\n      \n      \n        Determine whether the calling process of an IPC or you has been granted\n permission to access a specific URI.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkCallingPermission(String permission)\n      \n      \n        Determine whether the calling process of an IPC you are handling has been\n granted a particular permission.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkCallingUriPermission(Uri uri, int modeFlags)\n      \n      \n        Determine whether the calling process and user ID has been\n granted permission to access a specific URI.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkPermission(String permission, int pid, int uid)\n      \n      \n        Determine whether the given permission is allowed for a particular\n process and user ID running in the system.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkSelfPermission(String permission)\n      \n      \n        Determine whether you have been granted a particular permission.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid, int modeFlags)\n      \n      \n        Check both a Uri and normal permission.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkUriPermission(Uri uri, int pid, int uid, int modeFlags)\n      \n      \n        Determine whether a particular process and user ID has been granted\n permission to access a specific URI.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      clearWallpaper()\n      \n      \n        \n      This method was deprecated\n      in API level 15.\n    Use WallpaperManager.clear() instead.\n This method requires the caller to hold the permission\n Manifest.permission.SET_WALLPAPER.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Context\n    \n  \n    \n      \n      createConfigurationContext(Configuration overrideConfiguration)\n      \n      \n        Return a new Context object for the current Context but whose resources\n are adjusted to match the given Configuration.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Context\n    \n  \n    \n      \n      createContextForSplit(String splitName)\n      \n      \n        Return a new Context object for the given split name.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Context\n    \n  \n    \n      \n      createDeviceProtectedStorageContext()\n      \n      \n        Return a new Context object for the current Context but whose storage\n APIs are backed by device-protected storage.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Context\n    \n  \n    \n      \n      createDisplayContext(Display display)\n      \n      \n        Return a new Context object for the current Context but whose resources\n are adjusted to match the metrics of the given Display.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Context\n    \n  \n    \n      \n      createPackageContext(String packageName, int flags)\n      \n      \n        Return a new Context object for the given application name.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        String[]\n    \n  \n    \n      \n      databaseList()\n      \n      \n        Returns an array of strings naming the private databases associated with\n this Context's application package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      deleteDatabase(String name)\n      \n      \n        Delete an existing private SQLiteDatabase associated with this Context's\n application package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      deleteFile(String name)\n      \n      \n        Delete the given private file associated with this Context's\n application package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      deleteSharedPreferences(String name)\n      \n      \n        Delete an existing shared preferences file.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      enforceCallingOrSelfPermission(String permission, String message)\n      \n      \n        If neither you nor the calling process of an IPC you are\n handling has been granted a particular permission, throw a\n SecurityException.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      enforceCallingOrSelfUriPermission(Uri uri, int modeFlags, String message)\n      \n      \n        If the calling process of an IPC or you has not been\n granted permission to access a specific URI, throw SecurityException.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      enforceCallingPermission(String permission, String message)\n      \n      \n        If the calling process of an IPC you are handling has not been\n granted a particular permission, throw a SecurityException.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      enforceCallingUriPermission(Uri uri, int modeFlags, String message)\n      \n      \n        If the calling process and user ID has not been granted\n permission to access a specific URI, throw SecurityException.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      enforcePermission(String permission, int pid, int uid, String message)\n      \n      \n        If the given permission is not allowed for a particular process\n and user ID running in the system, throw a SecurityException.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      enforceUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid, int modeFlags, String message)\n      \n      \n        Enforce both a Uri and normal permission.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      enforceUriPermission(Uri uri, int pid, int uid, int modeFlags, String message)\n      \n      \n        If a particular process and user ID has not been granted\n permission to access a specific URI, throw SecurityException.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        String[]\n    \n  \n    \n      \n      fileList()\n      \n      \n        Returns an array of strings naming the private files associated with\n this Context's application package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Context\n    \n  \n    \n      \n      getApplicationContext()\n      \n      \n        Return the context of the single, global Application object of the\n current process.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        ApplicationInfo\n    \n  \n    \n      \n      getApplicationInfo()\n      \n      \n        Return the full application info for this context's package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        AssetManager\n    \n  \n    \n      \n      getAssets()\n      \n      \n        Returns an AssetManager instance for the application's package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getCacheDir()\n      \n      \n        Returns the absolute path to the application specific cache directory on\n the filesystem.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        ClassLoader\n    \n  \n    \n      \n      getClassLoader()\n      \n      \n        Return a class loader you can use to retrieve classes in this package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getCodeCacheDir()\n      \n      \n        Returns the absolute path to the application specific cache directory on\n the filesystem designed for storing cached code.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        int\n    \n  \n    \n      \n      getColor(int id)\n      \n      \n        Returns a color associated with a particular resource ID and styled for\n the current theme.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        ColorStateList\n    \n  \n    \n      \n      getColorStateList(int id)\n      \n      \n        Returns a color state list associated with a particular resource ID and\n styled for the current theme.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        ContentResolver\n    \n  \n    \n      \n      getContentResolver()\n      \n      \n        Return a ContentResolver instance for your application's package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getDataDir()\n      \n      \n        Returns the absolute path to the directory on the filesystem where all\n private files belonging to this app are stored.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getDatabasePath(String name)\n      \n      \n        Returns the absolute path on the filesystem where a database created with\n openOrCreateDatabase(String, int, SQLiteDatabase.CursorFactory) is stored.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getDir(String name, int mode)\n      \n      \n        Retrieve, creating if needed, a new directory in which the application\n can place its own custom data files.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        Drawable\n    \n  \n    \n      \n      getDrawable(int id)\n      \n      \n        Returns a drawable object associated with a particular resource ID and\n styled for the current theme.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getExternalCacheDir()\n      \n      \n        Returns absolute path to application-specific directory on the primary\n shared/external storage device where the application can place cache\n files it owns.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File[]\n    \n  \n    \n      \n      getExternalCacheDirs()\n      \n      \n        Returns absolute paths to application-specific directories on all\n shared/external storage devices where the application can place cache\n files it owns.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getExternalFilesDir(String type)\n      \n      \n        Returns the absolute path to the directory on the primary shared/external\n storage device where the application can place persistent files it owns.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File[]\n    \n  \n    \n      \n      getExternalFilesDirs(String type)\n      \n      \n        Returns absolute paths to application-specific directories on all\n shared/external storage devices where the application can place\n persistent files it owns.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File[]\n    \n  \n    \n      \n      getExternalMediaDirs()\n      \n      \n        Returns absolute paths to application-specific directories on all\n shared/external storage devices where the application can place media\n files.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getFileStreamPath(String name)\n      \n      \n        Returns the absolute path on the filesystem where a file created with\n openFileOutput(String, int) is stored.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getFilesDir()\n      \n      \n        Returns the absolute path to the directory on the filesystem where files\n created with openFileOutput(String, int) are stored.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Executor\n    \n  \n    \n      \n      getMainExecutor()\n      \n      \n        Return an Executor that will run enqueued tasks on the main\n thread associated with this context.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Looper\n    \n  \n    \n      \n      getMainLooper()\n      \n      \n        Return the Looper for the main thread of the current process.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getNoBackupFilesDir()\n      \n      \n        Returns the absolute path to the directory on the filesystem similar to\n getFilesDir().\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getObbDir()\n      \n      \n        Return the primary shared/external storage directory where this\n application's OBB files (if there are any) can be found.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File[]\n    \n  \n    \n      \n      getObbDirs()\n      \n      \n        Returns absolute paths to application-specific directories on all\n shared/external storage devices where the application's OBB files (if\n there are any) can be found.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        String\n    \n  \n    \n      \n      getOpPackageName()\n      \n      \n        Return the package name that should be used for AppOpsManager calls from\n this context, so that app ops manager's uid verification will work with the name.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        String\n    \n  \n    \n      \n      getPackageCodePath()\n      \n      \n        Return the full path to this context's primary Android package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        PackageManager\n    \n  \n    \n      \n      getPackageManager()\n      \n      \n        Return PackageManager instance to find global package information.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        String\n    \n  \n    \n      \n      getPackageName()\n      \n      \n        Return the name of this application's package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        String\n    \n  \n    \n      \n      getPackageResourcePath()\n      \n      \n        Return the full path to this context's primary Android package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Resources\n    \n  \n    \n      \n      getResources()\n      \n      \n        Returns a Resources instance for the application's package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        SharedPreferences\n    \n  \n    \n      \n      getSharedPreferences(String name, int mode)\n      \n      \n        Retrieve and hold the contents of the preferences file 'name', returning\n a SharedPreferences through which you can retrieve and modify its\n values.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        String\n    \n  \n    \n      \n      getString(int resId, Object... formatArgs)\n      \n      \n        Returns a localized formatted string from the application's package's\n default string table, substituting the format arguments as defined in\n Formatter and String.format(String, Object...).\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        String\n    \n  \n    \n      \n      getString(int resId)\n      \n      \n        Returns a localized string from the application's package's\n default string table.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        <T>\n        T\n    \n  \n    \n      \n      getSystemService(Class<T> serviceClass)\n      \n      \n        Return the handle to a system-level service by class.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Object\n    \n  \n    \n      \n      getSystemService(String name)\n      \n      \n        Return the handle to a system-level service by name.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        String\n    \n  \n    \n      \n      getSystemServiceName(Class<?> serviceClass)\n      \n      \n        Gets the name of the system-level service that is represented by the specified class.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        CharSequence\n    \n  \n    \n      \n      getText(int resId)\n      \n      \n        Return a localized, styled CharSequence from the application's package's\n default string table.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Resources.Theme\n    \n  \n    \n      \n      getTheme()\n      \n      \n        Return the Theme object associated with this Context.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Drawable\n    \n  \n    \n      \n      getWallpaper()\n      \n      \n        \n      This method was deprecated\n      in API level 15.\n    Use WallpaperManager.get() instead.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      getWallpaperDesiredMinimumHeight()\n      \n      \n        \n      This method was deprecated\n      in API level 15.\n    Use WallpaperManager.getDesiredMinimumHeight() instead.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      getWallpaperDesiredMinimumWidth()\n      \n      \n        \n      This method was deprecated\n      in API level 15.\n    Use WallpaperManager.getDesiredMinimumWidth() instead.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      grantUriPermission(String toPackage, Uri uri, int modeFlags)\n      \n      \n        Grant permission to access a specific Uri to another package, regardless\n of whether that package has general permission to access the Uri's\n content provider.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      isDeviceProtectedStorage()\n      \n      \n        Indicates if the storage APIs of this Context are backed by\n device-protected storage.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      isRestricted()\n      \n      \n        Indicates whether this Context is restricted.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      moveDatabaseFrom(Context sourceContext, String name)\n      \n      \n        Move an existing database file from the given source storage context to\n this context.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      moveSharedPreferencesFrom(Context sourceContext, String name)\n      \n      \n        Move an existing shared preferences file from the given source storage\n context to this context.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        TypedArray\n    \n  \n    \n      \n      obtainStyledAttributes(AttributeSet set, int[] attrs)\n      \n      \n        Retrieve styled attribute information in this Context's theme.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        TypedArray\n    \n  \n    \n      \n      obtainStyledAttributes(AttributeSet set, int[] attrs, int defStyleAttr, int defStyleRes)\n      \n      \n        Retrieve styled attribute information in this Context's theme.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        TypedArray\n    \n  \n    \n      \n      obtainStyledAttributes(int resid, int[] attrs)\n      \n      \n        Retrieve styled attribute information in this Context's theme.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        TypedArray\n    \n  \n    \n      \n      obtainStyledAttributes(int[] attrs)\n      \n      \n        Retrieve styled attribute information in this Context's theme.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        FileInputStream\n    \n  \n    \n      \n      openFileInput(String name)\n      \n      \n        Open a private file associated with this Context's application package\n for reading.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        FileOutputStream\n    \n  \n    \n      \n      openFileOutput(String name, int mode)\n      \n      \n        Open a private file associated with this Context's application package\n for writing.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        SQLiteDatabase\n    \n  \n    \n      \n      openOrCreateDatabase(String name, int mode, SQLiteDatabase.CursorFactory factory, DatabaseErrorHandler errorHandler)\n      \n      \n        Open a new private SQLiteDatabase associated with this Context's\n application package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        SQLiteDatabase\n    \n  \n    \n      \n      openOrCreateDatabase(String name, int mode, SQLiteDatabase.CursorFactory factory)\n      \n      \n        Open a new private SQLiteDatabase associated with this Context's\n application package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Drawable\n    \n  \n    \n      \n      peekWallpaper()\n      \n      \n        \n      This method was deprecated\n      in API level 15.\n    Use WallpaperManager.peek() instead.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      registerComponentCallbacks(ComponentCallbacks callback)\n      \n      \n        Add a new ComponentCallbacks to the base application of the\n Context, which will be called at the same times as the ComponentCallbacks\n methods of activities and other components are called.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Intent\n    \n  \n    \n      \n      registerReceiver(BroadcastReceiver receiver, IntentFilter filter)\n      \n      \n        Register a BroadcastReceiver to be run in the main activity thread.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Intent\n    \n  \n    \n      \n      registerReceiver(BroadcastReceiver receiver, IntentFilter filter, int flags)\n      \n      \n        Register to receive intent broadcasts, with the receiver optionally being\n exposed to Instant Apps.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Intent\n    \n  \n    \n      \n      registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler, int flags)\n      \n      \n        Register to receive intent broadcasts, to run in the context of\n scheduler.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Intent\n    \n  \n    \n      \n      registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler)\n      \n      \n        Register to receive intent broadcasts, to run in the context of\n scheduler.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      removeStickyBroadcast(Intent intent)\n      \n      \n        \n      This method was deprecated\n      in API level 21.\n    Sticky broadcasts should not be used.  They provide no security (anyone\n can access them), no protection (anyone can modify them), and many other problems.\n The recommended pattern is to use a non-sticky broadcast to report that something\n has changed, with another mechanism for apps to retrieve the current value whenever\n desired.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      removeStickyBroadcastAsUser(Intent intent, UserHandle user)\n      \n      \n        \n      This method was deprecated\n      in API level 21.\n    Sticky broadcasts should not be used.  They provide no security (anyone\n can access them), no protection (anyone can modify them), and many other problems.\n The recommended pattern is to use a non-sticky broadcast to report that something\n has changed, with another mechanism for apps to retrieve the current value whenever\n desired.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      revokeUriPermission(Uri uri, int modeFlags)\n      \n      \n        Remove all permissions to access a particular content provider Uri\n that were previously added with grantUriPermission(String, Uri, int) or any other mechanism.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      revokeUriPermission(String toPackage, Uri uri, int modeFlags)\n      \n      \n        Remove permissions to access a particular content provider Uri\n that were previously added with grantUriPermission(String, Uri, int) for a specific target\n package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendBroadcast(Intent intent, String receiverPermission)\n      \n      \n        Broadcast the given intent to all interested BroadcastReceivers, allowing\n an optional required permission to be enforced.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendBroadcast(Intent intent)\n      \n      \n        Broadcast the given intent to all interested BroadcastReceivers.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendBroadcastAsUser(Intent intent, UserHandle user)\n      \n      \n        Version of sendBroadcast(android.content.Intent) that allows you to specify the\n user the broadcast will be sent to.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission)\n      \n      \n        Version of sendBroadcast(android.content.Intent, java.lang.String) that allows you to specify the\n user the broadcast will be sent to.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendOrderedBroadcast(Intent intent, String receiverPermission, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)\n      \n      \n        Version of sendBroadcast(android.content.Intent) that allows you to\n receive data back from the broadcast.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendOrderedBroadcast(Intent intent, String receiverPermission)\n      \n      \n        Broadcast the given intent to all interested BroadcastReceivers, delivering\n them one at a time to allow more preferred receivers to consume the\n broadcast before it is delivered to less preferred receivers.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendOrderedBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)\n      \n      \n        Version of\n sendOrderedBroadcast(android.content.Intent, java.lang.String, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)\n that allows you to specify the\n user the broadcast will be sent to.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendStickyBroadcast(Intent intent)\n      \n      \n        \n      This method was deprecated\n      in API level 21.\n    Sticky broadcasts should not be used.  They provide no security (anyone\n can access them), no protection (anyone can modify them), and many other problems.\n The recommended pattern is to use a non-sticky broadcast to report that something\n has changed, with another mechanism for apps to retrieve the current value whenever\n desired.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendStickyBroadcastAsUser(Intent intent, UserHandle user)\n      \n      \n        \n      This method was deprecated\n      in API level 21.\n    Sticky broadcasts should not be used.  They provide no security (anyone\n can access them), no protection (anyone can modify them), and many other problems.\n The recommended pattern is to use a non-sticky broadcast to report that something\n has changed, with another mechanism for apps to retrieve the current value whenever\n desired.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendStickyOrderedBroadcast(Intent intent, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)\n      \n      \n        \n      This method was deprecated\n      in API level 21.\n    Sticky broadcasts should not be used.  They provide no security (anyone\n can access them), no protection (anyone can modify them), and many other problems.\n The recommended pattern is to use a non-sticky broadcast to report that something\n has changed, with another mechanism for apps to retrieve the current value whenever\n desired.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendStickyOrderedBroadcastAsUser(Intent intent, UserHandle user, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)\n      \n      \n        \n      This method was deprecated\n      in API level 21.\n    Sticky broadcasts should not be used.  They provide no security (anyone\n can access them), no protection (anyone can modify them), and many other problems.\n The recommended pattern is to use a non-sticky broadcast to report that something\n has changed, with another mechanism for apps to retrieve the current value whenever\n desired.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      setTheme(int resid)\n      \n      \n        Set the base theme for this context.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      setWallpaper(Bitmap bitmap)\n      \n      \n        \n      This method was deprecated\n      in API level 15.\n    Use WallpaperManager.set() instead.\n This method requires the caller to hold the permission\n Manifest.permission.SET_WALLPAPER.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      setWallpaper(InputStream data)\n      \n      \n        \n      This method was deprecated\n      in API level 15.\n    Use WallpaperManager.set() instead.\n This method requires the caller to hold the permission\n Manifest.permission.SET_WALLPAPER.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      startActivities(Intent[] intents, Bundle options)\n      \n      \n        Launch multiple new activities.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      startActivities(Intent[] intents)\n      \n      \n        Same as startActivities(android.content.Intent[], android.os.Bundle) with no options\n specified.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      startActivity(Intent intent)\n      \n      \n        Same as startActivity(android.content.Intent, android.os.Bundle) with no options\n specified.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      startActivity(Intent intent, Bundle options)\n      \n      \n        Launch a new activity.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        ComponentName\n    \n  \n    \n      \n      startForegroundService(Intent service)\n      \n      \n        Similar to startService(android.content.Intent), but with an implicit promise that the\n Service will call startForeground(int, android.app.Notification) once it begins running.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      startInstrumentation(ComponentName className, String profileFile, Bundle arguments)\n      \n      \n        Start executing an Instrumentation class.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      startIntentSender(IntentSender intent, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags)\n      \n      \n        Same as startIntentSender(android.content.IntentSender, android.content.Intent, int, int, int, android.os.Bundle)\n with no options specified.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      startIntentSender(IntentSender intent, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options)\n      \n      \n        Like startActivity(android.content.Intent, android.os.Bundle), but taking a IntentSender\n to start.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        ComponentName\n    \n  \n    \n      \n      startService(Intent service)\n      \n      \n        Request that a given application service be started.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      stopService(Intent service)\n      \n      \n        Request that a given application service be stopped.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      unbindService(ServiceConnection conn)\n      \n      \n        Disconnect from an application service.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      unregisterComponentCallbacks(ComponentCallbacks callback)\n      \n      \n        Remove a ComponentCallbacks object that was previously registered\n with registerComponentCallbacks(android.content.ComponentCallbacks).\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      unregisterReceiver(BroadcastReceiver receiver)\n      \n      \n        Unregister a previously registered BroadcastReceiver.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      updateServiceGroup(ServiceConnection conn, int group, int importance)\n      \n      \n        For a service previously bound with bindService(Intent, ServiceConnection, int) or a related method, change\n how the system manages that service's process in relation to other processes.\n        \n    \n\n      \n    \n  \n  \n\n\n    \n  \n\n\n\n\n\n\n  \n    From class\n      \n        \n          java.lang.Object\n        \n      \n    \n    \n      \n\n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Object\n    \n  \n    \n      \n      clone()\n      \n      \n        Creates and returns a copy of this object.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      equals(Object obj)\n      \n      \n        Indicates whether some other object is \"equal to\" this one.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      finalize()\n      \n      \n        Called by the garbage collector on an object when garbage collection\n determines that there are no more references to the object.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        Class<?>\n    \n  \n    \n      \n      getClass()\n      \n      \n        Returns the runtime class of this Object.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      hashCode()\n      \n      \n        Returns a hash code value for the object.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        void\n    \n  \n    \n      \n      notify()\n      \n      \n        Wakes up a single thread that is waiting on this object's\n monitor.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        void\n    \n  \n    \n      \n      notifyAll()\n      \n      \n        Wakes up all threads that are waiting on this object's monitor.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        String\n    \n  \n    \n      \n      toString()\n      \n      \n        Returns a string representation of the object.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        void\n    \n  \n    \n      \n      wait(long timeout, int nanos)\n      \n      \n        Causes the current thread to wait until another thread invokes the\n notify() method or the\n notifyAll() method for this object, or\n some other thread interrupts the current thread, or a certain\n amount of real time has elapsed.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        void\n    \n  \n    \n      \n      wait(long timeout)\n      \n      \n        Causes the current thread to wait until either another thread invokes the\n notify() method or the\n notifyAll() method for this object, or a\n specified amount of time has elapsed.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        void\n    \n  \n    \n      \n      wait()\n      \n      \n        Causes the current thread to wait until another thread invokes the\n notify() method or the\n notifyAll() method for this object.\n        \n    \n\n      \n    \n  \n  \n\n\n    \n  \n\n\n\n\n\n\n  \n    From interface\n      \n        \n          android.view.KeyEvent.Callback\n        \n      \n    \n    \n      \n\n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      onKeyDown(int keyCode, KeyEvent event)\n      \n      \n        Called when a key down event has occurred.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      onKeyLongPress(int keyCode, KeyEvent event)\n      \n      \n        Called when a long press has occurred.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      onKeyMultiple(int keyCode, int count, KeyEvent event)\n      \n      \n        Called when a user's interaction with an analog control, such as\n flinging a trackball, generates simulated down/up events for the same\n key multiple times in quick succession.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      onKeyUp(int keyCode, KeyEvent event)\n      \n      \n        Called when a key up event has occurred.\n        \n    \n\n      \n    \n  \n  \n\n\n    \n  \n\n\n\n\n\n\n  \n    From interface\n      \n        \n          android.content.ComponentCallbacks2\n        \n      \n    \n    \n      \n\n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      onTrimMemory(int level)\n      \n      \n        Called when the operating system has determined that it is a good\n time for a process to trim unneeded memory from its process.\n        \n    \n\n      \n    \n  \n  \n\n\n    \n  \n\n\n\n\n\n\n  \n    From interface\n      \n        \n          android.content.ComponentCallbacks\n        \n      \n    \n    \n      \n\n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      onConfigurationChanged(Configuration newConfig)\n      \n      \n        Called by the system when the device configuration changes while your\n component is running.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      onLowMemory()\n      \n      \n        This is called when the overall system is running low on memory, and\n actively running processes should trim their memory usage."
    },
    {
        "class": "android.inputmethodservice.InputMethodService",
        "api": "android:imeExtractExitAnimation",
        "permissionText": "Inherited methods\n\n\n\n\n  \n    From class\n      \n        \n          android.inputmethodservice.AbstractInputMethodService\n        \n      \n    \n    \n      \n\n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      dump(FileDescriptor fd, PrintWriter fout, String[] args)\n      \n      \n        Implement this to handle Binder.dump()\n calls on your input method.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        KeyEvent.DispatcherState\n    \n  \n    \n      \n      getKeyDispatcherState()\n      \n      \n        Return the global KeyEvent.DispatcherState\n for used for processing events from the target application.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        IBinder\n    \n  \n    \n      \n      onBind(Intent intent)\n      \n      \n        Return the communication channel to the service.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        AbstractInputMethodService.AbstractInputMethodImpl\n    \n  \n    \n      \n      onCreateInputMethodInterface()\n      \n      \n        Called by the framework during initialization, when the InputMethod\n interface for this service needs to be created.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        AbstractInputMethodService.AbstractInputMethodSessionImpl\n    \n  \n    \n      \n      onCreateInputMethodSessionInterface()\n      \n      \n        Called by the framework when a new InputMethodSession interface is\n needed for a new client of the input method.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      onGenericMotionEvent(MotionEvent event)\n      \n      \n        Implement this to handle generic motion events on your input method.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      onTrackballEvent(MotionEvent event)\n      \n      \n        Implement this to handle trackball events on your input method.\n        \n    \n\n      \n    \n  \n  \n\n\n    \n  \n\n\n\n\n\n\n  \n    From class\n      \n        \n          android.app.Service\n        \n      \n    \n    \n      \n\n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      dump(FileDescriptor fd, PrintWriter writer, String[] args)\n      \n      \n        Print the Service's state into the given stream.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        Application\n    \n  \n    \n      \n      getApplication()\n      \n      \n        Return the application that owns this service.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        int\n    \n  \n    \n      \n      getForegroundServiceType()\n      \n      \n        If the service has become a foreground service by calling\n startForeground(int, android.app.Notification)\n or startForeground(int, android.app.Notification, int), getForegroundServiceType()\n returns the current foreground service type.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        IBinder\n    \n  \n    \n      \n      onBind(Intent intent)\n      \n      \n        Return the communication channel to the service.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      onConfigurationChanged(Configuration newConfig)\n      \n      \n        Called by the system when the device configuration changes while your\n component is running.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      onCreate()\n      \n      \n        Called by the system when the service is first created.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      onDestroy()\n      \n      \n        Called by the system to notify a Service that it is no longer used and is being removed.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      onLowMemory()\n      \n      \n        This is called when the overall system is running low on memory, and\n actively running processes should trim their memory usage.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      onRebind(Intent intent)\n      \n      \n        Called when new clients have connected to the service, after it had\n previously been notified that all had disconnected in its\n onUnbind(Intent).\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      onStart(Intent intent, int startId)\n      \n      \n        \n      This method was deprecated\n      in API level 15.\n    Implement onStartCommand(android.content.Intent, int, int) instead.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      onStartCommand(Intent intent, int flags, int startId)\n      \n      \n        Called by the system every time a client explicitly starts the service by calling\n Context.startService(Intent), providing the arguments it supplied and a\n unique integer token representing the start request.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      onTaskRemoved(Intent rootIntent)\n      \n      \n        This is called if the service is currently running and the user has\n removed a task that comes from the service's application.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      onTrimMemory(int level)\n      \n      \n        Called when the operating system has determined that it is a good\n time for a process to trim unneeded memory from its process.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      onUnbind(Intent intent)\n      \n      \n        Called when all clients have disconnected from a particular interface\n published by the service.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        void\n    \n  \n    \n      \n      startForeground(int id, Notification notification)\n      \n      \n        If your service is started (running through Context#startService(Intent)), then\n also make this service run in the foreground, supplying the ongoing\n notification to be shown to the user while in this state.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        void\n    \n  \n    \n      \n      startForeground(int id, Notification notification, int foregroundServiceType)\n      \n      \n        An overloaded version of startForeground(int, android.app.Notification) with additional\n foregroundServiceType parameter.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        void\n    \n  \n    \n      \n      stopForeground(int flags)\n      \n      \n        Remove this service from foreground state, allowing it to be killed if\n more memory is needed.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        void\n    \n  \n    \n      \n      stopForeground(boolean removeNotification)\n      \n      \n        Synonym for stopForeground(int).\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        void\n    \n  \n    \n      \n      stopSelf()\n      \n      \n        Stop the service, if it was previously started.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        void\n    \n  \n    \n      \n      stopSelf(int startId)\n      \n      \n        Old version of stopSelfResult(int) that doesn't return a result.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        boolean\n    \n  \n    \n      \n      stopSelfResult(int startId)\n      \n      \n        Stop the service if the most recent time it was started was\n startId.\n        \n    \n\n      \n    \n  \n  \n\n\n    \n  \n\n\n\n\n\n\n  \n    From class\n      \n        \n          android.content.ContextWrapper\n        \n      \n    \n    \n      \n\n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      attachBaseContext(Context base)\n      \n      \n        Set the base context for this ContextWrapper.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      bindIsolatedService(Intent service, int flags, String instanceName, Executor executor, ServiceConnection conn)\n      \n      \n        Variation of bindService(Intent, ServiceConnection, int) that, in the specific case of isolated\n services, allows the caller to generate multiple instances of a service\n from a single component declaration.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      bindService(Intent service, int flags, Executor executor, ServiceConnection conn)\n      \n      \n        Same as bindService(android.content.Intent, android.content.ServiceConnection, int) with executor to control\n ServiceConnection callbacks.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      bindService(Intent service, ServiceConnection conn, int flags)\n      \n      \n        Connect to an application service, creating it if needed.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkCallingOrSelfPermission(String permission)\n      \n      \n        Determine whether the calling process of an IPC or you have been\n granted a particular permission.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkCallingOrSelfUriPermission(Uri uri, int modeFlags)\n      \n      \n        Determine whether the calling process of an IPC or you has been granted\n permission to access a specific URI.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkCallingPermission(String permission)\n      \n      \n        Determine whether the calling process of an IPC you are handling has been\n granted a particular permission.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkCallingUriPermission(Uri uri, int modeFlags)\n      \n      \n        Determine whether the calling process and user ID has been\n granted permission to access a specific URI.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkPermission(String permission, int pid, int uid)\n      \n      \n        Determine whether the given permission is allowed for a particular\n process and user ID running in the system.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkSelfPermission(String permission)\n      \n      \n        Determine whether you have been granted a particular permission.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid, int modeFlags)\n      \n      \n        Check both a Uri and normal permission.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkUriPermission(Uri uri, int pid, int uid, int modeFlags)\n      \n      \n        Determine whether a particular process and user ID has been granted\n permission to access a specific URI.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      clearWallpaper()\n      \n      \n        \n      This method is deprecated.\n    Use WallpaperManager.clear() instead.\n This method requires the caller to hold the permission\n Manifest.permission.SET_WALLPAPER.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Context\n    \n  \n    \n      \n      createConfigurationContext(Configuration overrideConfiguration)\n      \n      \n        Return a new Context object for the current Context but whose resources\n are adjusted to match the given Configuration.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Context\n    \n  \n    \n      \n      createDeviceProtectedStorageContext()\n      \n      \n        Return a new Context object for the current Context but whose storage\n APIs are backed by device-protected storage.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Context\n    \n  \n    \n      \n      createDisplayContext(Display display)\n      \n      \n        Return a new Context object for the current Context but whose resources\n are adjusted to match the metrics of the given Display.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Context\n    \n  \n    \n      \n      createPackageContext(String packageName, int flags)\n      \n      \n        Return a new Context object for the given application name.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        String[]\n    \n  \n    \n      \n      databaseList()\n      \n      \n        Returns an array of strings naming the private databases associated with\n this Context's application package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      deleteDatabase(String name)\n      \n      \n        Delete an existing private SQLiteDatabase associated with this Context's\n application package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      deleteFile(String name)\n      \n      \n        Delete the given private file associated with this Context's\n application package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      deleteSharedPreferences(String name)\n      \n      \n        Delete an existing shared preferences file.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      enforceCallingOrSelfPermission(String permission, String message)\n      \n      \n        If neither you nor the calling process of an IPC you are\n handling has been granted a particular permission, throw a\n SecurityException.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      enforceCallingOrSelfUriPermission(Uri uri, int modeFlags, String message)\n      \n      \n        If the calling process of an IPC or you has not been\n granted permission to access a specific URI, throw SecurityException.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      enforceCallingPermission(String permission, String message)\n      \n      \n        If the calling process of an IPC you are handling has not been\n granted a particular permission, throw a SecurityException.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      enforceCallingUriPermission(Uri uri, int modeFlags, String message)\n      \n      \n        If the calling process and user ID has not been granted\n permission to access a specific URI, throw SecurityException.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      enforcePermission(String permission, int pid, int uid, String message)\n      \n      \n        If the given permission is not allowed for a particular process\n and user ID running in the system, throw a SecurityException.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      enforceUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid, int modeFlags, String message)\n      \n      \n        Enforce both a Uri and normal permission.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      enforceUriPermission(Uri uri, int pid, int uid, int modeFlags, String message)\n      \n      \n        If a particular process and user ID has not been granted\n permission to access a specific URI, throw SecurityException.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        String[]\n    \n  \n    \n      \n      fileList()\n      \n      \n        Returns an array of strings naming the private files associated with\n this Context's application package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Context\n    \n  \n    \n      \n      getApplicationContext()\n      \n      \n        Return the context of the single, global Application object of the\n current process.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        ApplicationInfo\n    \n  \n    \n      \n      getApplicationInfo()\n      \n      \n        Return the full application info for this context's package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        AssetManager\n    \n  \n    \n      \n      getAssets()\n      \n      \n        Returns an AssetManager instance for the application's package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Context\n    \n  \n    \n      \n      getBaseContext()\n      \n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getCacheDir()\n      \n      \n        Returns the absolute path to the application specific cache directory on\n the filesystem.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        ClassLoader\n    \n  \n    \n      \n      getClassLoader()\n      \n      \n        Return a class loader you can use to retrieve classes in this package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getCodeCacheDir()\n      \n      \n        Returns the absolute path to the application specific cache directory on\n the filesystem designed for storing cached code.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        ContentResolver\n    \n  \n    \n      \n      getContentResolver()\n      \n      \n        Return a ContentResolver instance for your application's package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getDataDir()\n      \n      \n        Returns the absolute path to the directory on the filesystem where all\n private files belonging to this app are stored.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getDatabasePath(String name)\n      \n      \n        Returns the absolute path on the filesystem where a database created with\n openOrCreateDatabase(String, int, SQLiteDatabase.CursorFactory) is stored.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getDir(String name, int mode)\n      \n      \n        Retrieve, creating if needed, a new directory in which the application\n can place its own custom data files.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getExternalCacheDir()\n      \n      \n        Returns absolute path to application-specific directory on the primary\n shared/external storage device where the application can place cache\n files it owns.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File[]\n    \n  \n    \n      \n      getExternalCacheDirs()\n      \n      \n        Returns absolute paths to application-specific directories on all\n shared/external storage devices where the application can place cache\n files it owns.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getExternalFilesDir(String type)\n      \n      \n        Returns the absolute path to the directory on the primary shared/external\n storage device where the application can place persistent files it owns.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File[]\n    \n  \n    \n      \n      getExternalFilesDirs(String type)\n      \n      \n        Returns absolute paths to application-specific directories on all\n shared/external storage devices where the application can place\n persistent files it owns.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File[]\n    \n  \n    \n      \n      getExternalMediaDirs()\n      \n      \n        Returns absolute paths to application-specific directories on all\n shared/external storage devices where the application can place media\n files.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getFileStreamPath(String name)\n      \n      \n        Returns the absolute path on the filesystem where a file created with\n openFileOutput(String, int) is stored.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getFilesDir()\n      \n      \n        Returns the absolute path to the directory on the filesystem where files\n created with openFileOutput(String, int) are stored.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Executor\n    \n  \n    \n      \n      getMainExecutor()\n      \n      \n        Return an Executor that will run enqueued tasks on the main\n thread associated with this context.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Looper\n    \n  \n    \n      \n      getMainLooper()\n      \n      \n        Return the Looper for the main thread of the current process.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getNoBackupFilesDir()\n      \n      \n        Returns the absolute path to the directory on the filesystem similar to\n getFilesDir().\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getObbDir()\n      \n      \n        Return the primary shared/external storage directory where this\n application's OBB files (if there are any) can be found.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File[]\n    \n  \n    \n      \n      getObbDirs()\n      \n      \n        Returns absolute paths to application-specific directories on all\n shared/external storage devices where the application's OBB files (if\n there are any) can be found.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        String\n    \n  \n    \n      \n      getPackageCodePath()\n      \n      \n        Return the full path to this context's primary Android package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        PackageManager\n    \n  \n    \n      \n      getPackageManager()\n      \n      \n        Return PackageManager instance to find global package information.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        String\n    \n  \n    \n      \n      getPackageName()\n      \n      \n        Return the name of this application's package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        String\n    \n  \n    \n      \n      getPackageResourcePath()\n      \n      \n        Return the full path to this context's primary Android package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Resources\n    \n  \n    \n      \n      getResources()\n      \n      \n        Returns a Resources instance for the application's package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        SharedPreferences\n    \n  \n    \n      \n      getSharedPreferences(String name, int mode)\n      \n      \n        Retrieve and hold the contents of the preferences file 'name', returning\n a SharedPreferences through which you can retrieve and modify its\n values.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Object\n    \n  \n    \n      \n      getSystemService(String name)\n      \n      \n        Return the handle to a system-level service by name.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        String\n    \n  \n    \n      \n      getSystemServiceName(Class<?> serviceClass)\n      \n      \n        Gets the name of the system-level service that is represented by the specified class.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Resources.Theme\n    \n  \n    \n      \n      getTheme()\n      \n      \n        Return the Theme object associated with this Context.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Drawable\n    \n  \n    \n      \n      getWallpaper()\n      \n      \n        \n      This method is deprecated.\n    Use WallpaperManager.get() instead.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      getWallpaperDesiredMinimumHeight()\n      \n      \n        \n      This method is deprecated.\n    Use WallpaperManager.getDesiredMinimumHeight() instead.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      getWallpaperDesiredMinimumWidth()\n      \n      \n        \n      This method is deprecated.\n    Use WallpaperManager.getDesiredMinimumWidth() instead.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      grantUriPermission(String toPackage, Uri uri, int modeFlags)\n      \n      \n        Grant permission to access a specific Uri to another package, regardless\n of whether that package has general permission to access the Uri's\n content provider.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      isDeviceProtectedStorage()\n      \n      \n        Indicates if the storage APIs of this Context are backed by\n device-protected storage.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      isRestricted()\n      \n      \n        Indicates whether this Context is restricted.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      moveDatabaseFrom(Context sourceContext, String name)\n      \n      \n        Move an existing database file from the given source storage context to\n this context.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      moveSharedPreferencesFrom(Context sourceContext, String name)\n      \n      \n        Move an existing shared preferences file from the given source storage\n context to this context.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        FileInputStream\n    \n  \n    \n      \n      openFileInput(String name)\n      \n      \n        Open a private file associated with this Context's application package\n for reading.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        FileOutputStream\n    \n  \n    \n      \n      openFileOutput(String name, int mode)\n      \n      \n        Open a private file associated with this Context's application package\n for writing.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        SQLiteDatabase\n    \n  \n    \n      \n      openOrCreateDatabase(String name, int mode, SQLiteDatabase.CursorFactory factory, DatabaseErrorHandler errorHandler)\n      \n      \n        Open a new private SQLiteDatabase associated with this Context's\n application package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        SQLiteDatabase\n    \n  \n    \n      \n      openOrCreateDatabase(String name, int mode, SQLiteDatabase.CursorFactory factory)\n      \n      \n        Open a new private SQLiteDatabase associated with this Context's\n application package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Drawable\n    \n  \n    \n      \n      peekWallpaper()\n      \n      \n        \n      This method is deprecated.\n    Use WallpaperManager.peek() instead.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Intent\n    \n  \n    \n      \n      registerReceiver(BroadcastReceiver receiver, IntentFilter filter)\n      \n      \n        Register a BroadcastReceiver to be run in the main activity thread.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Intent\n    \n  \n    \n      \n      registerReceiver(BroadcastReceiver receiver, IntentFilter filter, int flags)\n      \n      \n        Register to receive intent broadcasts, with the receiver optionally being\n exposed to Instant Apps.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Intent\n    \n  \n    \n      \n      registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler, int flags)\n      \n      \n        Register to receive intent broadcasts, to run in the context of\n scheduler.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Intent\n    \n  \n    \n      \n      registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler)\n      \n      \n        Register to receive intent broadcasts, to run in the context of\n scheduler.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      removeStickyBroadcast(Intent intent)\n      \n      \n        \n      This method is deprecated.\n    Sticky broadcasts should not be used.  They provide no security (anyone\n can access them), no protection (anyone can modify them), and many other problems.\n The recommended pattern is to use a non-sticky broadcast to report that something\n has changed, with another mechanism for apps to retrieve the current value whenever\n desired.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      removeStickyBroadcastAsUser(Intent intent, UserHandle user)\n      \n      \n        \n      This method is deprecated.\n    Sticky broadcasts should not be used.  They provide no security (anyone\n can access them), no protection (anyone can modify them), and many other problems.\n The recommended pattern is to use a non-sticky broadcast to report that something\n has changed, with another mechanism for apps to retrieve the current value whenever\n desired.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      revokeUriPermission(Uri uri, int modeFlags)\n      \n      \n        Remove all permissions to access a particular content provider Uri\n that were previously added with grantUriPermission(String, Uri, int) or any other mechanism.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      revokeUriPermission(String targetPackage, Uri uri, int modeFlags)\n      \n      \n        Remove permissions to access a particular content provider Uri\n that were previously added with grantUriPermission(String, Uri, int) for a specific target\n package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendBroadcast(Intent intent, String receiverPermission)\n      \n      \n        Broadcast the given intent to all interested BroadcastReceivers, allowing\n an optional required permission to be enforced.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendBroadcast(Intent intent)\n      \n      \n        Broadcast the given intent to all interested BroadcastReceivers.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendBroadcastAsUser(Intent intent, UserHandle user)\n      \n      \n        Version of sendBroadcast(android.content.Intent) that allows you to specify the\n user the broadcast will be sent to.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission)\n      \n      \n        Version of sendBroadcast(android.content.Intent, java.lang.String) that allows you to specify the\n user the broadcast will be sent to.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendOrderedBroadcast(Intent intent, String receiverPermission, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)\n      \n      \n        Version of sendBroadcast(android.content.Intent) that allows you to\n receive data back from the broadcast.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendOrderedBroadcast(Intent intent, String receiverPermission)\n      \n      \n        Broadcast the given intent to all interested BroadcastReceivers, delivering\n them one at a time to allow more preferred receivers to consume the\n broadcast before it is delivered to less preferred receivers.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendOrderedBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)\n      \n      \n        Version of\n sendOrderedBroadcast(android.content.Intent, java.lang.String, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)\n that allows you to specify the\n user the broadcast will be sent to.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendStickyBroadcast(Intent intent)\n      \n      \n        \n      This method is deprecated.\n    Sticky broadcasts should not be used.  They provide no security (anyone\n can access them), no protection (anyone can modify them), and many other problems.\n The recommended pattern is to use a non-sticky broadcast to report that something\n has changed, with another mechanism for apps to retrieve the current value whenever\n desired.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendStickyBroadcastAsUser(Intent intent, UserHandle user)\n      \n      \n        \n      This method is deprecated.\n    Sticky broadcasts should not be used.  They provide no security (anyone\n can access them), no protection (anyone can modify them), and many other problems.\n The recommended pattern is to use a non-sticky broadcast to report that something\n has changed, with another mechanism for apps to retrieve the current value whenever\n desired.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendStickyOrderedBroadcast(Intent intent, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)\n      \n      \n        \n      This method is deprecated.\n    Sticky broadcasts should not be used.  They provide no security (anyone\n can access them), no protection (anyone can modify them), and many other problems.\n The recommended pattern is to use a non-sticky broadcast to report that something\n has changed, with another mechanism for apps to retrieve the current value whenever\n desired.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendStickyOrderedBroadcastAsUser(Intent intent, UserHandle user, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)\n      \n      \n        \n      This method is deprecated.\n    Sticky broadcasts should not be used.  They provide no security (anyone\n can access them), no protection (anyone can modify them), and many other problems.\n The recommended pattern is to use a non-sticky broadcast to report that something\n has changed, with another mechanism for apps to retrieve the current value whenever\n desired.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      setTheme(int resid)\n      \n      \n        Set the base theme for this context.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      setWallpaper(Bitmap bitmap)\n      \n      \n        \n      This method is deprecated.\n    Use WallpaperManager.set() instead.\n This method requires the caller to hold the permission\n Manifest.permission.SET_WALLPAPER.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      setWallpaper(InputStream data)\n      \n      \n        \n      This method is deprecated.\n    Use WallpaperManager.set() instead.\n This method requires the caller to hold the permission\n Manifest.permission.SET_WALLPAPER.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      startActivities(Intent[] intents, Bundle options)\n      \n      \n        Launch multiple new activities.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      startActivities(Intent[] intents)\n      \n      \n        Same as startActivities(android.content.Intent[], android.os.Bundle) with no options\n specified.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      startActivity(Intent intent)\n      \n      \n        Same as startActivity(android.content.Intent, android.os.Bundle) with no options\n specified.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      startActivity(Intent intent, Bundle options)\n      \n      \n        Launch a new activity.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        ComponentName\n    \n  \n    \n      \n      startForegroundService(Intent service)\n      \n      \n        Similar to startService(android.content.Intent), but with an implicit promise that the\n Service will call startForeground(int, android.app.Notification) once it begins running.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      startInstrumentation(ComponentName className, String profileFile, Bundle arguments)\n      \n      \n        Start executing an Instrumentation class.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      startIntentSender(IntentSender intent, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags)\n      \n      \n        Same as startIntentSender(android.content.IntentSender, android.content.Intent, int, int, int, android.os.Bundle)\n with no options specified.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      startIntentSender(IntentSender intent, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options)\n      \n      \n        Like startActivity(android.content.Intent, android.os.Bundle), but taking a IntentSender\n to start.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        ComponentName\n    \n  \n    \n      \n      startService(Intent service)\n      \n      \n        Request that a given application service be started.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      stopService(Intent name)\n      \n      \n        Request that a given application service be stopped.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      unbindService(ServiceConnection conn)\n      \n      \n        Disconnect from an application service.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      unregisterReceiver(BroadcastReceiver receiver)\n      \n      \n        Unregister a previously registered BroadcastReceiver.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      updateServiceGroup(ServiceConnection conn, int group, int importance)\n      \n      \n        For a service previously bound with bindService(Intent, ServiceConnection, int) or a related method, change\n how the system manages that service's process in relation to other processes.\n        \n    \n\n      \n    \n  \n  \n\n\n    \n  \n\n\n\n\n\n\n  \n    From class\n      \n        \n          android.content.Context\n        \n      \n    \n    \n      \n\n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      bindIsolatedService(Intent service, int flags, String instanceName, Executor executor, ServiceConnection conn)\n      \n      \n        Variation of bindService(Intent, ServiceConnection, int) that, in the specific case of isolated\n services, allows the caller to generate multiple instances of a service\n from a single component declaration.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      bindService(Intent service, int flags, Executor executor, ServiceConnection conn)\n      \n      \n        Same as bindService(android.content.Intent, android.content.ServiceConnection, int) with executor to control\n ServiceConnection callbacks.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      bindService(Intent service, ServiceConnection conn, int flags)\n      \n      \n        Connect to an application service, creating it if needed.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkCallingOrSelfPermission(String permission)\n      \n      \n        Determine whether the calling process of an IPC or you have been\n granted a particular permission.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkCallingOrSelfUriPermission(Uri uri, int modeFlags)\n      \n      \n        Determine whether the calling process of an IPC or you has been granted\n permission to access a specific URI.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkCallingPermission(String permission)\n      \n      \n        Determine whether the calling process of an IPC you are handling has been\n granted a particular permission.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkCallingUriPermission(Uri uri, int modeFlags)\n      \n      \n        Determine whether the calling process and user ID has been\n granted permission to access a specific URI.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkPermission(String permission, int pid, int uid)\n      \n      \n        Determine whether the given permission is allowed for a particular\n process and user ID running in the system.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkSelfPermission(String permission)\n      \n      \n        Determine whether you have been granted a particular permission.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid, int modeFlags)\n      \n      \n        Check both a Uri and normal permission.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkUriPermission(Uri uri, int pid, int uid, int modeFlags)\n      \n      \n        Determine whether a particular process and user ID has been granted\n permission to access a specific URI.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      clearWallpaper()\n      \n      \n        \n      This method was deprecated\n      in API level 15.\n    Use WallpaperManager.clear() instead.\n This method requires the caller to hold the permission\n Manifest.permission.SET_WALLPAPER.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Context\n    \n  \n    \n      \n      createConfigurationContext(Configuration overrideConfiguration)\n      \n      \n        Return a new Context object for the current Context but whose resources\n are adjusted to match the given Configuration.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Context\n    \n  \n    \n      \n      createContextForSplit(String splitName)\n      \n      \n        Return a new Context object for the given split name.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Context\n    \n  \n    \n      \n      createDeviceProtectedStorageContext()\n      \n      \n        Return a new Context object for the current Context but whose storage\n APIs are backed by device-protected storage.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Context\n    \n  \n    \n      \n      createDisplayContext(Display display)\n      \n      \n        Return a new Context object for the current Context but whose resources\n are adjusted to match the metrics of the given Display.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Context\n    \n  \n    \n      \n      createPackageContext(String packageName, int flags)\n      \n      \n        Return a new Context object for the given application name.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        String[]\n    \n  \n    \n      \n      databaseList()\n      \n      \n        Returns an array of strings naming the private databases associated with\n this Context's application package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      deleteDatabase(String name)\n      \n      \n        Delete an existing private SQLiteDatabase associated with this Context's\n application package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      deleteFile(String name)\n      \n      \n        Delete the given private file associated with this Context's\n application package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      deleteSharedPreferences(String name)\n      \n      \n        Delete an existing shared preferences file.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      enforceCallingOrSelfPermission(String permission, String message)\n      \n      \n        If neither you nor the calling process of an IPC you are\n handling has been granted a particular permission, throw a\n SecurityException.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      enforceCallingOrSelfUriPermission(Uri uri, int modeFlags, String message)\n      \n      \n        If the calling process of an IPC or you has not been\n granted permission to access a specific URI, throw SecurityException.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      enforceCallingPermission(String permission, String message)\n      \n      \n        If the calling process of an IPC you are handling has not been\n granted a particular permission, throw a SecurityException.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      enforceCallingUriPermission(Uri uri, int modeFlags, String message)\n      \n      \n        If the calling process and user ID has not been granted\n permission to access a specific URI, throw SecurityException.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      enforcePermission(String permission, int pid, int uid, String message)\n      \n      \n        If the given permission is not allowed for a particular process\n and user ID running in the system, throw a SecurityException.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      enforceUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid, int modeFlags, String message)\n      \n      \n        Enforce both a Uri and normal permission.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      enforceUriPermission(Uri uri, int pid, int uid, int modeFlags, String message)\n      \n      \n        If a particular process and user ID has not been granted\n permission to access a specific URI, throw SecurityException.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        String[]\n    \n  \n    \n      \n      fileList()\n      \n      \n        Returns an array of strings naming the private files associated with\n this Context's application package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Context\n    \n  \n    \n      \n      getApplicationContext()\n      \n      \n        Return the context of the single, global Application object of the\n current process.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        ApplicationInfo\n    \n  \n    \n      \n      getApplicationInfo()\n      \n      \n        Return the full application info for this context's package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        AssetManager\n    \n  \n    \n      \n      getAssets()\n      \n      \n        Returns an AssetManager instance for the application's package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getCacheDir()\n      \n      \n        Returns the absolute path to the application specific cache directory on\n the filesystem.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        ClassLoader\n    \n  \n    \n      \n      getClassLoader()\n      \n      \n        Return a class loader you can use to retrieve classes in this package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getCodeCacheDir()\n      \n      \n        Returns the absolute path to the application specific cache directory on\n the filesystem designed for storing cached code.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        int\n    \n  \n    \n      \n      getColor(int id)\n      \n      \n        Returns a color associated with a particular resource ID and styled for\n the current theme.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        ColorStateList\n    \n  \n    \n      \n      getColorStateList(int id)\n      \n      \n        Returns a color state list associated with a particular resource ID and\n styled for the current theme.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        ContentResolver\n    \n  \n    \n      \n      getContentResolver()\n      \n      \n        Return a ContentResolver instance for your application's package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getDataDir()\n      \n      \n        Returns the absolute path to the directory on the filesystem where all\n private files belonging to this app are stored.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getDatabasePath(String name)\n      \n      \n        Returns the absolute path on the filesystem where a database created with\n openOrCreateDatabase(String, int, SQLiteDatabase.CursorFactory) is stored.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getDir(String name, int mode)\n      \n      \n        Retrieve, creating if needed, a new directory in which the application\n can place its own custom data files.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        Drawable\n    \n  \n    \n      \n      getDrawable(int id)\n      \n      \n        Returns a drawable object associated with a particular resource ID and\n styled for the current theme.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getExternalCacheDir()\n      \n      \n        Returns absolute path to application-specific directory on the primary\n shared/external storage device where the application can place cache\n files it owns.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File[]\n    \n  \n    \n      \n      getExternalCacheDirs()\n      \n      \n        Returns absolute paths to application-specific directories on all\n shared/external storage devices where the application can place cache\n files it owns.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getExternalFilesDir(String type)\n      \n      \n        Returns the absolute path to the directory on the primary shared/external\n storage device where the application can place persistent files it owns.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File[]\n    \n  \n    \n      \n      getExternalFilesDirs(String type)\n      \n      \n        Returns absolute paths to application-specific directories on all\n shared/external storage devices where the application can place\n persistent files it owns.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File[]\n    \n  \n    \n      \n      getExternalMediaDirs()\n      \n      \n        Returns absolute paths to application-specific directories on all\n shared/external storage devices where the application can place media\n files.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getFileStreamPath(String name)\n      \n      \n        Returns the absolute path on the filesystem where a file created with\n openFileOutput(String, int) is stored.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getFilesDir()\n      \n      \n        Returns the absolute path to the directory on the filesystem where files\n created with openFileOutput(String, int) are stored.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Executor\n    \n  \n    \n      \n      getMainExecutor()\n      \n      \n        Return an Executor that will run enqueued tasks on the main\n thread associated with this context.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Looper\n    \n  \n    \n      \n      getMainLooper()\n      \n      \n        Return the Looper for the main thread of the current process.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getNoBackupFilesDir()\n      \n      \n        Returns the absolute path to the directory on the filesystem similar to\n getFilesDir().\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getObbDir()\n      \n      \n        Return the primary shared/external storage directory where this\n application's OBB files (if there are any) can be found.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File[]\n    \n  \n    \n      \n      getObbDirs()\n      \n      \n        Returns absolute paths to application-specific directories on all\n shared/external storage devices where the application's OBB files (if\n there are any) can be found.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        String\n    \n  \n    \n      \n      getOpPackageName()\n      \n      \n        Return the package name that should be used for AppOpsManager calls from\n this context, so that app ops manager's uid verification will work with the name.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        String\n    \n  \n    \n      \n      getPackageCodePath()\n      \n      \n        Return the full path to this context's primary Android package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        PackageManager\n    \n  \n    \n      \n      getPackageManager()\n      \n      \n        Return PackageManager instance to find global package information.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        String\n    \n  \n    \n      \n      getPackageName()\n      \n      \n        Return the name of this application's package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        String\n    \n  \n    \n      \n      getPackageResourcePath()\n      \n      \n        Return the full path to this context's primary Android package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Resources\n    \n  \n    \n      \n      getResources()\n      \n      \n        Returns a Resources instance for the application's package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        SharedPreferences\n    \n  \n    \n      \n      getSharedPreferences(String name, int mode)\n      \n      \n        Retrieve and hold the contents of the preferences file 'name', returning\n a SharedPreferences through which you can retrieve and modify its\n values.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        String\n    \n  \n    \n      \n      getString(int resId, Object... formatArgs)\n      \n      \n        Returns a localized formatted string from the application's package's\n default string table, substituting the format arguments as defined in\n Formatter and String.format(String, Object...).\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        String\n    \n  \n    \n      \n      getString(int resId)\n      \n      \n        Returns a localized string from the application's package's\n default string table.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        <T>\n        T\n    \n  \n    \n      \n      getSystemService(Class<T> serviceClass)\n      \n      \n        Return the handle to a system-level service by class.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Object\n    \n  \n    \n      \n      getSystemService(String name)\n      \n      \n        Return the handle to a system-level service by name.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        String\n    \n  \n    \n      \n      getSystemServiceName(Class<?> serviceClass)\n      \n      \n        Gets the name of the system-level service that is represented by the specified class.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        CharSequence\n    \n  \n    \n      \n      getText(int resId)\n      \n      \n        Return a localized, styled CharSequence from the application's package's\n default string table.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Resources.Theme\n    \n  \n    \n      \n      getTheme()\n      \n      \n        Return the Theme object associated with this Context.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Drawable\n    \n  \n    \n      \n      getWallpaper()\n      \n      \n        \n      This method was deprecated\n      in API level 15.\n    Use WallpaperManager.get() instead.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      getWallpaperDesiredMinimumHeight()\n      \n      \n        \n      This method was deprecated\n      in API level 15.\n    Use WallpaperManager.getDesiredMinimumHeight() instead.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      getWallpaperDesiredMinimumWidth()\n      \n      \n        \n      This method was deprecated\n      in API level 15.\n    Use WallpaperManager.getDesiredMinimumWidth() instead.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      grantUriPermission(String toPackage, Uri uri, int modeFlags)\n      \n      \n        Grant permission to access a specific Uri to another package, regardless\n of whether that package has general permission to access the Uri's\n content provider.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      isDeviceProtectedStorage()\n      \n      \n        Indicates if the storage APIs of this Context are backed by\n device-protected storage.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      isRestricted()\n      \n      \n        Indicates whether this Context is restricted.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      moveDatabaseFrom(Context sourceContext, String name)\n      \n      \n        Move an existing database file from the given source storage context to\n this context.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      moveSharedPreferencesFrom(Context sourceContext, String name)\n      \n      \n        Move an existing shared preferences file from the given source storage\n context to this context.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        TypedArray\n    \n  \n    \n      \n      obtainStyledAttributes(AttributeSet set, int[] attrs)\n      \n      \n        Retrieve styled attribute information in this Context's theme.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        TypedArray\n    \n  \n    \n      \n      obtainStyledAttributes(AttributeSet set, int[] attrs, int defStyleAttr, int defStyleRes)\n      \n      \n        Retrieve styled attribute information in this Context's theme.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        TypedArray\n    \n  \n    \n      \n      obtainStyledAttributes(int resid, int[] attrs)\n      \n      \n        Retrieve styled attribute information in this Context's theme.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        TypedArray\n    \n  \n    \n      \n      obtainStyledAttributes(int[] attrs)\n      \n      \n        Retrieve styled attribute information in this Context's theme.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        FileInputStream\n    \n  \n    \n      \n      openFileInput(String name)\n      \n      \n        Open a private file associated with this Context's application package\n for reading.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        FileOutputStream\n    \n  \n    \n      \n      openFileOutput(String name, int mode)\n      \n      \n        Open a private file associated with this Context's application package\n for writing.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        SQLiteDatabase\n    \n  \n    \n      \n      openOrCreateDatabase(String name, int mode, SQLiteDatabase.CursorFactory factory, DatabaseErrorHandler errorHandler)\n      \n      \n        Open a new private SQLiteDatabase associated with this Context's\n application package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        SQLiteDatabase\n    \n  \n    \n      \n      openOrCreateDatabase(String name, int mode, SQLiteDatabase.CursorFactory factory)\n      \n      \n        Open a new private SQLiteDatabase associated with this Context's\n application package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Drawable\n    \n  \n    \n      \n      peekWallpaper()\n      \n      \n        \n      This method was deprecated\n      in API level 15.\n    Use WallpaperManager.peek() instead.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      registerComponentCallbacks(ComponentCallbacks callback)\n      \n      \n        Add a new ComponentCallbacks to the base application of the\n Context, which will be called at the same times as the ComponentCallbacks\n methods of activities and other components are called.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Intent\n    \n  \n    \n      \n      registerReceiver(BroadcastReceiver receiver, IntentFilter filter)\n      \n      \n        Register a BroadcastReceiver to be run in the main activity thread.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Intent\n    \n  \n    \n      \n      registerReceiver(BroadcastReceiver receiver, IntentFilter filter, int flags)\n      \n      \n        Register to receive intent broadcasts, with the receiver optionally being\n exposed to Instant Apps.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Intent\n    \n  \n    \n      \n      registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler, int flags)\n      \n      \n        Register to receive intent broadcasts, to run in the context of\n scheduler.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Intent\n    \n  \n    \n      \n      registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler)\n      \n      \n        Register to receive intent broadcasts, to run in the context of\n scheduler.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      removeStickyBroadcast(Intent intent)\n      \n      \n        \n      This method was deprecated\n      in API level 21.\n    Sticky broadcasts should not be used.  They provide no security (anyone\n can access them), no protection (anyone can modify them), and many other problems.\n The recommended pattern is to use a non-sticky broadcast to report that something\n has changed, with another mechanism for apps to retrieve the current value whenever\n desired.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      removeStickyBroadcastAsUser(Intent intent, UserHandle user)\n      \n      \n        \n      This method was deprecated\n      in API level 21.\n    Sticky broadcasts should not be used.  They provide no security (anyone\n can access them), no protection (anyone can modify them), and many other problems.\n The recommended pattern is to use a non-sticky broadcast to report that something\n has changed, with another mechanism for apps to retrieve the current value whenever\n desired.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      revokeUriPermission(Uri uri, int modeFlags)\n      \n      \n        Remove all permissions to access a particular content provider Uri\n that were previously added with grantUriPermission(String, Uri, int) or any other mechanism.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      revokeUriPermission(String toPackage, Uri uri, int modeFlags)\n      \n      \n        Remove permissions to access a particular content provider Uri\n that were previously added with grantUriPermission(String, Uri, int) for a specific target\n package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendBroadcast(Intent intent, String receiverPermission)\n      \n      \n        Broadcast the given intent to all interested BroadcastReceivers, allowing\n an optional required permission to be enforced.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendBroadcast(Intent intent)\n      \n      \n        Broadcast the given intent to all interested BroadcastReceivers.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendBroadcastAsUser(Intent intent, UserHandle user)\n      \n      \n        Version of sendBroadcast(android.content.Intent) that allows you to specify the\n user the broadcast will be sent to.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission)\n      \n      \n        Version of sendBroadcast(android.content.Intent, java.lang.String) that allows you to specify the\n user the broadcast will be sent to.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendOrderedBroadcast(Intent intent, String receiverPermission, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)\n      \n      \n        Version of sendBroadcast(android.content.Intent) that allows you to\n receive data back from the broadcast.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendOrderedBroadcast(Intent intent, String receiverPermission)\n      \n      \n        Broadcast the given intent to all interested BroadcastReceivers, delivering\n them one at a time to allow more preferred receivers to consume the\n broadcast before it is delivered to less preferred receivers.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendOrderedBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)\n      \n      \n        Version of\n sendOrderedBroadcast(android.content.Intent, java.lang.String, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)\n that allows you to specify the\n user the broadcast will be sent to.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendStickyBroadcast(Intent intent)\n      \n      \n        \n      This method was deprecated\n      in API level 21.\n    Sticky broadcasts should not be used.  They provide no security (anyone\n can access them), no protection (anyone can modify them), and many other problems.\n The recommended pattern is to use a non-sticky broadcast to report that something\n has changed, with another mechanism for apps to retrieve the current value whenever\n desired.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendStickyBroadcastAsUser(Intent intent, UserHandle user)\n      \n      \n        \n      This method was deprecated\n      in API level 21.\n    Sticky broadcasts should not be used.  They provide no security (anyone\n can access them), no protection (anyone can modify them), and many other problems.\n The recommended pattern is to use a non-sticky broadcast to report that something\n has changed, with another mechanism for apps to retrieve the current value whenever\n desired.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendStickyOrderedBroadcast(Intent intent, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)\n      \n      \n        \n      This method was deprecated\n      in API level 21.\n    Sticky broadcasts should not be used.  They provide no security (anyone\n can access them), no protection (anyone can modify them), and many other problems.\n The recommended pattern is to use a non-sticky broadcast to report that something\n has changed, with another mechanism for apps to retrieve the current value whenever\n desired.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendStickyOrderedBroadcastAsUser(Intent intent, UserHandle user, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)\n      \n      \n        \n      This method was deprecated\n      in API level 21.\n    Sticky broadcasts should not be used.  They provide no security (anyone\n can access them), no protection (anyone can modify them), and many other problems.\n The recommended pattern is to use a non-sticky broadcast to report that something\n has changed, with another mechanism for apps to retrieve the current value whenever\n desired.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      setTheme(int resid)\n      \n      \n        Set the base theme for this context.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      setWallpaper(Bitmap bitmap)\n      \n      \n        \n      This method was deprecated\n      in API level 15.\n    Use WallpaperManager.set() instead.\n This method requires the caller to hold the permission\n Manifest.permission.SET_WALLPAPER.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      setWallpaper(InputStream data)\n      \n      \n        \n      This method was deprecated\n      in API level 15.\n    Use WallpaperManager.set() instead.\n This method requires the caller to hold the permission\n Manifest.permission.SET_WALLPAPER.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      startActivities(Intent[] intents, Bundle options)\n      \n      \n        Launch multiple new activities.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      startActivities(Intent[] intents)\n      \n      \n        Same as startActivities(android.content.Intent[], android.os.Bundle) with no options\n specified.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      startActivity(Intent intent)\n      \n      \n        Same as startActivity(android.content.Intent, android.os.Bundle) with no options\n specified.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      startActivity(Intent intent, Bundle options)\n      \n      \n        Launch a new activity.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        ComponentName\n    \n  \n    \n      \n      startForegroundService(Intent service)\n      \n      \n        Similar to startService(android.content.Intent), but with an implicit promise that the\n Service will call startForeground(int, android.app.Notification) once it begins running.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      startInstrumentation(ComponentName className, String profileFile, Bundle arguments)\n      \n      \n        Start executing an Instrumentation class.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      startIntentSender(IntentSender intent, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags)\n      \n      \n        Same as startIntentSender(android.content.IntentSender, android.content.Intent, int, int, int, android.os.Bundle)\n with no options specified.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      startIntentSender(IntentSender intent, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options)\n      \n      \n        Like startActivity(android.content.Intent, android.os.Bundle), but taking a IntentSender\n to start.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        ComponentName\n    \n  \n    \n      \n      startService(Intent service)\n      \n      \n        Request that a given application service be started.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      stopService(Intent service)\n      \n      \n        Request that a given application service be stopped.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      unbindService(ServiceConnection conn)\n      \n      \n        Disconnect from an application service.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      unregisterComponentCallbacks(ComponentCallbacks callback)\n      \n      \n        Remove a ComponentCallbacks object that was previously registered\n with registerComponentCallbacks(android.content.ComponentCallbacks).\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      unregisterReceiver(BroadcastReceiver receiver)\n      \n      \n        Unregister a previously registered BroadcastReceiver.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      updateServiceGroup(ServiceConnection conn, int group, int importance)\n      \n      \n        For a service previously bound with bindService(Intent, ServiceConnection, int) or a related method, change\n how the system manages that service's process in relation to other processes.\n        \n    \n\n      \n    \n  \n  \n\n\n    \n  \n\n\n\n\n\n\n  \n    From class\n      \n        \n          java.lang.Object\n        \n      \n    \n    \n      \n\n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Object\n    \n  \n    \n      \n      clone()\n      \n      \n        Creates and returns a copy of this object.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      equals(Object obj)\n      \n      \n        Indicates whether some other object is \"equal to\" this one.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      finalize()\n      \n      \n        Called by the garbage collector on an object when garbage collection\n determines that there are no more references to the object.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        Class<?>\n    \n  \n    \n      \n      getClass()\n      \n      \n        Returns the runtime class of this Object.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      hashCode()\n      \n      \n        Returns a hash code value for the object.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        void\n    \n  \n    \n      \n      notify()\n      \n      \n        Wakes up a single thread that is waiting on this object's\n monitor.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        void\n    \n  \n    \n      \n      notifyAll()\n      \n      \n        Wakes up all threads that are waiting on this object's monitor.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        String\n    \n  \n    \n      \n      toString()\n      \n      \n        Returns a string representation of the object.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        void\n    \n  \n    \n      \n      wait(long timeout, int nanos)\n      \n      \n        Causes the current thread to wait until another thread invokes the\n notify() method or the\n notifyAll() method for this object, or\n some other thread interrupts the current thread, or a certain\n amount of real time has elapsed.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        void\n    \n  \n    \n      \n      wait(long timeout)\n      \n      \n        Causes the current thread to wait until either another thread invokes the\n notify() method or the\n notifyAll() method for this object, or a\n specified amount of time has elapsed.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        void\n    \n  \n    \n      \n      wait()\n      \n      \n        Causes the current thread to wait until another thread invokes the\n notify() method or the\n notifyAll() method for this object.\n        \n    \n\n      \n    \n  \n  \n\n\n    \n  \n\n\n\n\n\n\n  \n    From interface\n      \n        \n          android.view.KeyEvent.Callback\n        \n      \n    \n    \n      \n\n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      onKeyDown(int keyCode, KeyEvent event)\n      \n      \n        Called when a key down event has occurred.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      onKeyLongPress(int keyCode, KeyEvent event)\n      \n      \n        Called when a long press has occurred.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      onKeyMultiple(int keyCode, int count, KeyEvent event)\n      \n      \n        Called when a user's interaction with an analog control, such as\n flinging a trackball, generates simulated down/up events for the same\n key multiple times in quick succession.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      onKeyUp(int keyCode, KeyEvent event)\n      \n      \n        Called when a key up event has occurred.\n        \n    \n\n      \n    \n  \n  \n\n\n    \n  \n\n\n\n\n\n\n  \n    From interface\n      \n        \n          android.content.ComponentCallbacks2\n        \n      \n    \n    \n      \n\n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      onTrimMemory(int level)\n      \n      \n        Called when the operating system has determined that it is a good\n time for a process to trim unneeded memory from its process.\n        \n    \n\n      \n    \n  \n  \n\n\n    \n  \n\n\n\n\n\n\n  \n    From interface\n      \n        \n          android.content.ComponentCallbacks\n        \n      \n    \n    \n      \n\n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      onConfigurationChanged(Configuration newConfig)\n      \n      \n        Called by the system when the device configuration changes while your\n component is running.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      onLowMemory()\n      \n      \n        This is called when the overall system is running low on memory, and\n actively running processes should trim their memory usage."
    },
    {
        "class": "android.inputmethodservice.InputMethodService",
        "api": "android:imeFullscreenBackground",
        "permissionText": "Inherited methods\n\n\n\n\n  \n    From class\n      \n        \n          android.inputmethodservice.AbstractInputMethodService\n        \n      \n    \n    \n      \n\n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      dump(FileDescriptor fd, PrintWriter fout, String[] args)\n      \n      \n        Implement this to handle Binder.dump()\n calls on your input method.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        KeyEvent.DispatcherState\n    \n  \n    \n      \n      getKeyDispatcherState()\n      \n      \n        Return the global KeyEvent.DispatcherState\n for used for processing events from the target application.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        IBinder\n    \n  \n    \n      \n      onBind(Intent intent)\n      \n      \n        Return the communication channel to the service.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        AbstractInputMethodService.AbstractInputMethodImpl\n    \n  \n    \n      \n      onCreateInputMethodInterface()\n      \n      \n        Called by the framework during initialization, when the InputMethod\n interface for this service needs to be created.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        AbstractInputMethodService.AbstractInputMethodSessionImpl\n    \n  \n    \n      \n      onCreateInputMethodSessionInterface()\n      \n      \n        Called by the framework when a new InputMethodSession interface is\n needed for a new client of the input method.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      onGenericMotionEvent(MotionEvent event)\n      \n      \n        Implement this to handle generic motion events on your input method.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      onTrackballEvent(MotionEvent event)\n      \n      \n        Implement this to handle trackball events on your input method.\n        \n    \n\n      \n    \n  \n  \n\n\n    \n  \n\n\n\n\n\n\n  \n    From class\n      \n        \n          android.app.Service\n        \n      \n    \n    \n      \n\n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      dump(FileDescriptor fd, PrintWriter writer, String[] args)\n      \n      \n        Print the Service's state into the given stream.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        Application\n    \n  \n    \n      \n      getApplication()\n      \n      \n        Return the application that owns this service.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        int\n    \n  \n    \n      \n      getForegroundServiceType()\n      \n      \n        If the service has become a foreground service by calling\n startForeground(int, android.app.Notification)\n or startForeground(int, android.app.Notification, int), getForegroundServiceType()\n returns the current foreground service type.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        IBinder\n    \n  \n    \n      \n      onBind(Intent intent)\n      \n      \n        Return the communication channel to the service.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      onConfigurationChanged(Configuration newConfig)\n      \n      \n        Called by the system when the device configuration changes while your\n component is running.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      onCreate()\n      \n      \n        Called by the system when the service is first created.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      onDestroy()\n      \n      \n        Called by the system to notify a Service that it is no longer used and is being removed.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      onLowMemory()\n      \n      \n        This is called when the overall system is running low on memory, and\n actively running processes should trim their memory usage.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      onRebind(Intent intent)\n      \n      \n        Called when new clients have connected to the service, after it had\n previously been notified that all had disconnected in its\n onUnbind(Intent).\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      onStart(Intent intent, int startId)\n      \n      \n        \n      This method was deprecated\n      in API level 15.\n    Implement onStartCommand(android.content.Intent, int, int) instead.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      onStartCommand(Intent intent, int flags, int startId)\n      \n      \n        Called by the system every time a client explicitly starts the service by calling\n Context.startService(Intent), providing the arguments it supplied and a\n unique integer token representing the start request.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      onTaskRemoved(Intent rootIntent)\n      \n      \n        This is called if the service is currently running and the user has\n removed a task that comes from the service's application.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      onTrimMemory(int level)\n      \n      \n        Called when the operating system has determined that it is a good\n time for a process to trim unneeded memory from its process.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      onUnbind(Intent intent)\n      \n      \n        Called when all clients have disconnected from a particular interface\n published by the service.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        void\n    \n  \n    \n      \n      startForeground(int id, Notification notification)\n      \n      \n        If your service is started (running through Context#startService(Intent)), then\n also make this service run in the foreground, supplying the ongoing\n notification to be shown to the user while in this state.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        void\n    \n  \n    \n      \n      startForeground(int id, Notification notification, int foregroundServiceType)\n      \n      \n        An overloaded version of startForeground(int, android.app.Notification) with additional\n foregroundServiceType parameter.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        void\n    \n  \n    \n      \n      stopForeground(int flags)\n      \n      \n        Remove this service from foreground state, allowing it to be killed if\n more memory is needed.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        void\n    \n  \n    \n      \n      stopForeground(boolean removeNotification)\n      \n      \n        Synonym for stopForeground(int).\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        void\n    \n  \n    \n      \n      stopSelf()\n      \n      \n        Stop the service, if it was previously started.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        void\n    \n  \n    \n      \n      stopSelf(int startId)\n      \n      \n        Old version of stopSelfResult(int) that doesn't return a result.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        boolean\n    \n  \n    \n      \n      stopSelfResult(int startId)\n      \n      \n        Stop the service if the most recent time it was started was\n startId.\n        \n    \n\n      \n    \n  \n  \n\n\n    \n  \n\n\n\n\n\n\n  \n    From class\n      \n        \n          android.content.ContextWrapper\n        \n      \n    \n    \n      \n\n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      attachBaseContext(Context base)\n      \n      \n        Set the base context for this ContextWrapper.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      bindIsolatedService(Intent service, int flags, String instanceName, Executor executor, ServiceConnection conn)\n      \n      \n        Variation of bindService(Intent, ServiceConnection, int) that, in the specific case of isolated\n services, allows the caller to generate multiple instances of a service\n from a single component declaration.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      bindService(Intent service, int flags, Executor executor, ServiceConnection conn)\n      \n      \n        Same as bindService(android.content.Intent, android.content.ServiceConnection, int) with executor to control\n ServiceConnection callbacks.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      bindService(Intent service, ServiceConnection conn, int flags)\n      \n      \n        Connect to an application service, creating it if needed.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkCallingOrSelfPermission(String permission)\n      \n      \n        Determine whether the calling process of an IPC or you have been\n granted a particular permission.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkCallingOrSelfUriPermission(Uri uri, int modeFlags)\n      \n      \n        Determine whether the calling process of an IPC or you has been granted\n permission to access a specific URI.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkCallingPermission(String permission)\n      \n      \n        Determine whether the calling process of an IPC you are handling has been\n granted a particular permission.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkCallingUriPermission(Uri uri, int modeFlags)\n      \n      \n        Determine whether the calling process and user ID has been\n granted permission to access a specific URI.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkPermission(String permission, int pid, int uid)\n      \n      \n        Determine whether the given permission is allowed for a particular\n process and user ID running in the system.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkSelfPermission(String permission)\n      \n      \n        Determine whether you have been granted a particular permission.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid, int modeFlags)\n      \n      \n        Check both a Uri and normal permission.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkUriPermission(Uri uri, int pid, int uid, int modeFlags)\n      \n      \n        Determine whether a particular process and user ID has been granted\n permission to access a specific URI.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      clearWallpaper()\n      \n      \n        \n      This method is deprecated.\n    Use WallpaperManager.clear() instead.\n This method requires the caller to hold the permission\n Manifest.permission.SET_WALLPAPER.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Context\n    \n  \n    \n      \n      createConfigurationContext(Configuration overrideConfiguration)\n      \n      \n        Return a new Context object for the current Context but whose resources\n are adjusted to match the given Configuration.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Context\n    \n  \n    \n      \n      createDeviceProtectedStorageContext()\n      \n      \n        Return a new Context object for the current Context but whose storage\n APIs are backed by device-protected storage.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Context\n    \n  \n    \n      \n      createDisplayContext(Display display)\n      \n      \n        Return a new Context object for the current Context but whose resources\n are adjusted to match the metrics of the given Display.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Context\n    \n  \n    \n      \n      createPackageContext(String packageName, int flags)\n      \n      \n        Return a new Context object for the given application name.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        String[]\n    \n  \n    \n      \n      databaseList()\n      \n      \n        Returns an array of strings naming the private databases associated with\n this Context's application package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      deleteDatabase(String name)\n      \n      \n        Delete an existing private SQLiteDatabase associated with this Context's\n application package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      deleteFile(String name)\n      \n      \n        Delete the given private file associated with this Context's\n application package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      deleteSharedPreferences(String name)\n      \n      \n        Delete an existing shared preferences file.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      enforceCallingOrSelfPermission(String permission, String message)\n      \n      \n        If neither you nor the calling process of an IPC you are\n handling has been granted a particular permission, throw a\n SecurityException.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      enforceCallingOrSelfUriPermission(Uri uri, int modeFlags, String message)\n      \n      \n        If the calling process of an IPC or you has not been\n granted permission to access a specific URI, throw SecurityException.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      enforceCallingPermission(String permission, String message)\n      \n      \n        If the calling process of an IPC you are handling has not been\n granted a particular permission, throw a SecurityException.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      enforceCallingUriPermission(Uri uri, int modeFlags, String message)\n      \n      \n        If the calling process and user ID has not been granted\n permission to access a specific URI, throw SecurityException.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      enforcePermission(String permission, int pid, int uid, String message)\n      \n      \n        If the given permission is not allowed for a particular process\n and user ID running in the system, throw a SecurityException.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      enforceUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid, int modeFlags, String message)\n      \n      \n        Enforce both a Uri and normal permission.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      enforceUriPermission(Uri uri, int pid, int uid, int modeFlags, String message)\n      \n      \n        If a particular process and user ID has not been granted\n permission to access a specific URI, throw SecurityException.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        String[]\n    \n  \n    \n      \n      fileList()\n      \n      \n        Returns an array of strings naming the private files associated with\n this Context's application package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Context\n    \n  \n    \n      \n      getApplicationContext()\n      \n      \n        Return the context of the single, global Application object of the\n current process.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        ApplicationInfo\n    \n  \n    \n      \n      getApplicationInfo()\n      \n      \n        Return the full application info for this context's package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        AssetManager\n    \n  \n    \n      \n      getAssets()\n      \n      \n        Returns an AssetManager instance for the application's package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Context\n    \n  \n    \n      \n      getBaseContext()\n      \n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getCacheDir()\n      \n      \n        Returns the absolute path to the application specific cache directory on\n the filesystem.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        ClassLoader\n    \n  \n    \n      \n      getClassLoader()\n      \n      \n        Return a class loader you can use to retrieve classes in this package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getCodeCacheDir()\n      \n      \n        Returns the absolute path to the application specific cache directory on\n the filesystem designed for storing cached code.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        ContentResolver\n    \n  \n    \n      \n      getContentResolver()\n      \n      \n        Return a ContentResolver instance for your application's package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getDataDir()\n      \n      \n        Returns the absolute path to the directory on the filesystem where all\n private files belonging to this app are stored.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getDatabasePath(String name)\n      \n      \n        Returns the absolute path on the filesystem where a database created with\n openOrCreateDatabase(String, int, SQLiteDatabase.CursorFactory) is stored.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getDir(String name, int mode)\n      \n      \n        Retrieve, creating if needed, a new directory in which the application\n can place its own custom data files.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getExternalCacheDir()\n      \n      \n        Returns absolute path to application-specific directory on the primary\n shared/external storage device where the application can place cache\n files it owns.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File[]\n    \n  \n    \n      \n      getExternalCacheDirs()\n      \n      \n        Returns absolute paths to application-specific directories on all\n shared/external storage devices where the application can place cache\n files it owns.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getExternalFilesDir(String type)\n      \n      \n        Returns the absolute path to the directory on the primary shared/external\n storage device where the application can place persistent files it owns.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File[]\n    \n  \n    \n      \n      getExternalFilesDirs(String type)\n      \n      \n        Returns absolute paths to application-specific directories on all\n shared/external storage devices where the application can place\n persistent files it owns.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File[]\n    \n  \n    \n      \n      getExternalMediaDirs()\n      \n      \n        Returns absolute paths to application-specific directories on all\n shared/external storage devices where the application can place media\n files.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getFileStreamPath(String name)\n      \n      \n        Returns the absolute path on the filesystem where a file created with\n openFileOutput(String, int) is stored.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getFilesDir()\n      \n      \n        Returns the absolute path to the directory on the filesystem where files\n created with openFileOutput(String, int) are stored.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Executor\n    \n  \n    \n      \n      getMainExecutor()\n      \n      \n        Return an Executor that will run enqueued tasks on the main\n thread associated with this context.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Looper\n    \n  \n    \n      \n      getMainLooper()\n      \n      \n        Return the Looper for the main thread of the current process.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getNoBackupFilesDir()\n      \n      \n        Returns the absolute path to the directory on the filesystem similar to\n getFilesDir().\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getObbDir()\n      \n      \n        Return the primary shared/external storage directory where this\n application's OBB files (if there are any) can be found.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        File[]\n    \n  \n    \n      \n      getObbDirs()\n      \n      \n        Returns absolute paths to application-specific directories on all\n shared/external storage devices where the application's OBB files (if\n there are any) can be found.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        String\n    \n  \n    \n      \n      getPackageCodePath()\n      \n      \n        Return the full path to this context's primary Android package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        PackageManager\n    \n  \n    \n      \n      getPackageManager()\n      \n      \n        Return PackageManager instance to find global package information.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        String\n    \n  \n    \n      \n      getPackageName()\n      \n      \n        Return the name of this application's package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        String\n    \n  \n    \n      \n      getPackageResourcePath()\n      \n      \n        Return the full path to this context's primary Android package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Resources\n    \n  \n    \n      \n      getResources()\n      \n      \n        Returns a Resources instance for the application's package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        SharedPreferences\n    \n  \n    \n      \n      getSharedPreferences(String name, int mode)\n      \n      \n        Retrieve and hold the contents of the preferences file 'name', returning\n a SharedPreferences through which you can retrieve and modify its\n values.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Object\n    \n  \n    \n      \n      getSystemService(String name)\n      \n      \n        Return the handle to a system-level service by name.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        String\n    \n  \n    \n      \n      getSystemServiceName(Class<?> serviceClass)\n      \n      \n        Gets the name of the system-level service that is represented by the specified class.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Resources.Theme\n    \n  \n    \n      \n      getTheme()\n      \n      \n        Return the Theme object associated with this Context.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Drawable\n    \n  \n    \n      \n      getWallpaper()\n      \n      \n        \n      This method is deprecated.\n    Use WallpaperManager.get() instead.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      getWallpaperDesiredMinimumHeight()\n      \n      \n        \n      This method is deprecated.\n    Use WallpaperManager.getDesiredMinimumHeight() instead.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      getWallpaperDesiredMinimumWidth()\n      \n      \n        \n      This method is deprecated.\n    Use WallpaperManager.getDesiredMinimumWidth() instead.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      grantUriPermission(String toPackage, Uri uri, int modeFlags)\n      \n      \n        Grant permission to access a specific Uri to another package, regardless\n of whether that package has general permission to access the Uri's\n content provider.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      isDeviceProtectedStorage()\n      \n      \n        Indicates if the storage APIs of this Context are backed by\n device-protected storage.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      isRestricted()\n      \n      \n        Indicates whether this Context is restricted.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      moveDatabaseFrom(Context sourceContext, String name)\n      \n      \n        Move an existing database file from the given source storage context to\n this context.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      moveSharedPreferencesFrom(Context sourceContext, String name)\n      \n      \n        Move an existing shared preferences file from the given source storage\n context to this context.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        FileInputStream\n    \n  \n    \n      \n      openFileInput(String name)\n      \n      \n        Open a private file associated with this Context's application package\n for reading.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        FileOutputStream\n    \n  \n    \n      \n      openFileOutput(String name, int mode)\n      \n      \n        Open a private file associated with this Context's application package\n for writing.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        SQLiteDatabase\n    \n  \n    \n      \n      openOrCreateDatabase(String name, int mode, SQLiteDatabase.CursorFactory factory, DatabaseErrorHandler errorHandler)\n      \n      \n        Open a new private SQLiteDatabase associated with this Context's\n application package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        SQLiteDatabase\n    \n  \n    \n      \n      openOrCreateDatabase(String name, int mode, SQLiteDatabase.CursorFactory factory)\n      \n      \n        Open a new private SQLiteDatabase associated with this Context's\n application package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Drawable\n    \n  \n    \n      \n      peekWallpaper()\n      \n      \n        \n      This method is deprecated.\n    Use WallpaperManager.peek() instead.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Intent\n    \n  \n    \n      \n      registerReceiver(BroadcastReceiver receiver, IntentFilter filter)\n      \n      \n        Register a BroadcastReceiver to be run in the main activity thread.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Intent\n    \n  \n    \n      \n      registerReceiver(BroadcastReceiver receiver, IntentFilter filter, int flags)\n      \n      \n        Register to receive intent broadcasts, with the receiver optionally being\n exposed to Instant Apps.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Intent\n    \n  \n    \n      \n      registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler, int flags)\n      \n      \n        Register to receive intent broadcasts, to run in the context of\n scheduler.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Intent\n    \n  \n    \n      \n      registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler)\n      \n      \n        Register to receive intent broadcasts, to run in the context of\n scheduler.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      removeStickyBroadcast(Intent intent)\n      \n      \n        \n      This method is deprecated.\n    Sticky broadcasts should not be used.  They provide no security (anyone\n can access them), no protection (anyone can modify them), and many other problems.\n The recommended pattern is to use a non-sticky broadcast to report that something\n has changed, with another mechanism for apps to retrieve the current value whenever\n desired.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      removeStickyBroadcastAsUser(Intent intent, UserHandle user)\n      \n      \n        \n      This method is deprecated.\n    Sticky broadcasts should not be used.  They provide no security (anyone\n can access them), no protection (anyone can modify them), and many other problems.\n The recommended pattern is to use a non-sticky broadcast to report that something\n has changed, with another mechanism for apps to retrieve the current value whenever\n desired.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      revokeUriPermission(Uri uri, int modeFlags)\n      \n      \n        Remove all permissions to access a particular content provider Uri\n that were previously added with grantUriPermission(String, Uri, int) or any other mechanism.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      revokeUriPermission(String targetPackage, Uri uri, int modeFlags)\n      \n      \n        Remove permissions to access a particular content provider Uri\n that were previously added with grantUriPermission(String, Uri, int) for a specific target\n package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendBroadcast(Intent intent, String receiverPermission)\n      \n      \n        Broadcast the given intent to all interested BroadcastReceivers, allowing\n an optional required permission to be enforced.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendBroadcast(Intent intent)\n      \n      \n        Broadcast the given intent to all interested BroadcastReceivers.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendBroadcastAsUser(Intent intent, UserHandle user)\n      \n      \n        Version of sendBroadcast(android.content.Intent) that allows you to specify the\n user the broadcast will be sent to.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission)\n      \n      \n        Version of sendBroadcast(android.content.Intent, java.lang.String) that allows you to specify the\n user the broadcast will be sent to.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendOrderedBroadcast(Intent intent, String receiverPermission, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)\n      \n      \n        Version of sendBroadcast(android.content.Intent) that allows you to\n receive data back from the broadcast.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendOrderedBroadcast(Intent intent, String receiverPermission)\n      \n      \n        Broadcast the given intent to all interested BroadcastReceivers, delivering\n them one at a time to allow more preferred receivers to consume the\n broadcast before it is delivered to less preferred receivers.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendOrderedBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)\n      \n      \n        Version of\n sendOrderedBroadcast(android.content.Intent, java.lang.String, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)\n that allows you to specify the\n user the broadcast will be sent to.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendStickyBroadcast(Intent intent)\n      \n      \n        \n      This method is deprecated.\n    Sticky broadcasts should not be used.  They provide no security (anyone\n can access them), no protection (anyone can modify them), and many other problems.\n The recommended pattern is to use a non-sticky broadcast to report that something\n has changed, with another mechanism for apps to retrieve the current value whenever\n desired.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendStickyBroadcastAsUser(Intent intent, UserHandle user)\n      \n      \n        \n      This method is deprecated.\n    Sticky broadcasts should not be used.  They provide no security (anyone\n can access them), no protection (anyone can modify them), and many other problems.\n The recommended pattern is to use a non-sticky broadcast to report that something\n has changed, with another mechanism for apps to retrieve the current value whenever\n desired.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendStickyOrderedBroadcast(Intent intent, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)\n      \n      \n        \n      This method is deprecated.\n    Sticky broadcasts should not be used.  They provide no security (anyone\n can access them), no protection (anyone can modify them), and many other problems.\n The recommended pattern is to use a non-sticky broadcast to report that something\n has changed, with another mechanism for apps to retrieve the current value whenever\n desired.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendStickyOrderedBroadcastAsUser(Intent intent, UserHandle user, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)\n      \n      \n        \n      This method is deprecated.\n    Sticky broadcasts should not be used.  They provide no security (anyone\n can access them), no protection (anyone can modify them), and many other problems.\n The recommended pattern is to use a non-sticky broadcast to report that something\n has changed, with another mechanism for apps to retrieve the current value whenever\n desired.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      setTheme(int resid)\n      \n      \n        Set the base theme for this context.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      setWallpaper(Bitmap bitmap)\n      \n      \n        \n      This method is deprecated.\n    Use WallpaperManager.set() instead.\n This method requires the caller to hold the permission\n Manifest.permission.SET_WALLPAPER.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      setWallpaper(InputStream data)\n      \n      \n        \n      This method is deprecated.\n    Use WallpaperManager.set() instead.\n This method requires the caller to hold the permission\n Manifest.permission.SET_WALLPAPER.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      startActivities(Intent[] intents, Bundle options)\n      \n      \n        Launch multiple new activities.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      startActivities(Intent[] intents)\n      \n      \n        Same as startActivities(android.content.Intent[], android.os.Bundle) with no options\n specified.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      startActivity(Intent intent)\n      \n      \n        Same as startActivity(android.content.Intent, android.os.Bundle) with no options\n specified.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      startActivity(Intent intent, Bundle options)\n      \n      \n        Launch a new activity.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        ComponentName\n    \n  \n    \n      \n      startForegroundService(Intent service)\n      \n      \n        Similar to startService(android.content.Intent), but with an implicit promise that the\n Service will call startForeground(int, android.app.Notification) once it begins running.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      startInstrumentation(ComponentName className, String profileFile, Bundle arguments)\n      \n      \n        Start executing an Instrumentation class.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      startIntentSender(IntentSender intent, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags)\n      \n      \n        Same as startIntentSender(android.content.IntentSender, android.content.Intent, int, int, int, android.os.Bundle)\n with no options specified.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      startIntentSender(IntentSender intent, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options)\n      \n      \n        Like startActivity(android.content.Intent, android.os.Bundle), but taking a IntentSender\n to start.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        ComponentName\n    \n  \n    \n      \n      startService(Intent service)\n      \n      \n        Request that a given application service be started.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      stopService(Intent name)\n      \n      \n        Request that a given application service be stopped.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      unbindService(ServiceConnection conn)\n      \n      \n        Disconnect from an application service.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      unregisterReceiver(BroadcastReceiver receiver)\n      \n      \n        Unregister a previously registered BroadcastReceiver.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      updateServiceGroup(ServiceConnection conn, int group, int importance)\n      \n      \n        For a service previously bound with bindService(Intent, ServiceConnection, int) or a related method, change\n how the system manages that service's process in relation to other processes.\n        \n    \n\n      \n    \n  \n  \n\n\n    \n  \n\n\n\n\n\n\n  \n    From class\n      \n        \n          android.content.Context\n        \n      \n    \n    \n      \n\n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      bindIsolatedService(Intent service, int flags, String instanceName, Executor executor, ServiceConnection conn)\n      \n      \n        Variation of bindService(Intent, ServiceConnection, int) that, in the specific case of isolated\n services, allows the caller to generate multiple instances of a service\n from a single component declaration.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      bindService(Intent service, int flags, Executor executor, ServiceConnection conn)\n      \n      \n        Same as bindService(android.content.Intent, android.content.ServiceConnection, int) with executor to control\n ServiceConnection callbacks.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      bindService(Intent service, ServiceConnection conn, int flags)\n      \n      \n        Connect to an application service, creating it if needed.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkCallingOrSelfPermission(String permission)\n      \n      \n        Determine whether the calling process of an IPC or you have been\n granted a particular permission.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkCallingOrSelfUriPermission(Uri uri, int modeFlags)\n      \n      \n        Determine whether the calling process of an IPC or you has been granted\n permission to access a specific URI.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkCallingPermission(String permission)\n      \n      \n        Determine whether the calling process of an IPC you are handling has been\n granted a particular permission.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkCallingUriPermission(Uri uri, int modeFlags)\n      \n      \n        Determine whether the calling process and user ID has been\n granted permission to access a specific URI.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkPermission(String permission, int pid, int uid)\n      \n      \n        Determine whether the given permission is allowed for a particular\n process and user ID running in the system.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkSelfPermission(String permission)\n      \n      \n        Determine whether you have been granted a particular permission.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid, int modeFlags)\n      \n      \n        Check both a Uri and normal permission.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      checkUriPermission(Uri uri, int pid, int uid, int modeFlags)\n      \n      \n        Determine whether a particular process and user ID has been granted\n permission to access a specific URI.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      clearWallpaper()\n      \n      \n        \n      This method was deprecated\n      in API level 15.\n    Use WallpaperManager.clear() instead.\n This method requires the caller to hold the permission\n Manifest.permission.SET_WALLPAPER.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Context\n    \n  \n    \n      \n      createConfigurationContext(Configuration overrideConfiguration)\n      \n      \n        Return a new Context object for the current Context but whose resources\n are adjusted to match the given Configuration.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Context\n    \n  \n    \n      \n      createContextForSplit(String splitName)\n      \n      \n        Return a new Context object for the given split name.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Context\n    \n  \n    \n      \n      createDeviceProtectedStorageContext()\n      \n      \n        Return a new Context object for the current Context but whose storage\n APIs are backed by device-protected storage.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Context\n    \n  \n    \n      \n      createDisplayContext(Display display)\n      \n      \n        Return a new Context object for the current Context but whose resources\n are adjusted to match the metrics of the given Display.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Context\n    \n  \n    \n      \n      createPackageContext(String packageName, int flags)\n      \n      \n        Return a new Context object for the given application name.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        String[]\n    \n  \n    \n      \n      databaseList()\n      \n      \n        Returns an array of strings naming the private databases associated with\n this Context's application package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      deleteDatabase(String name)\n      \n      \n        Delete an existing private SQLiteDatabase associated with this Context's\n application package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      deleteFile(String name)\n      \n      \n        Delete the given private file associated with this Context's\n application package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      deleteSharedPreferences(String name)\n      \n      \n        Delete an existing shared preferences file.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      enforceCallingOrSelfPermission(String permission, String message)\n      \n      \n        If neither you nor the calling process of an IPC you are\n handling has been granted a particular permission, throw a\n SecurityException.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      enforceCallingOrSelfUriPermission(Uri uri, int modeFlags, String message)\n      \n      \n        If the calling process of an IPC or you has not been\n granted permission to access a specific URI, throw SecurityException.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      enforceCallingPermission(String permission, String message)\n      \n      \n        If the calling process of an IPC you are handling has not been\n granted a particular permission, throw a SecurityException.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      enforceCallingUriPermission(Uri uri, int modeFlags, String message)\n      \n      \n        If the calling process and user ID has not been granted\n permission to access a specific URI, throw SecurityException.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      enforcePermission(String permission, int pid, int uid, String message)\n      \n      \n        If the given permission is not allowed for a particular process\n and user ID running in the system, throw a SecurityException.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      enforceUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid, int modeFlags, String message)\n      \n      \n        Enforce both a Uri and normal permission.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      enforceUriPermission(Uri uri, int pid, int uid, int modeFlags, String message)\n      \n      \n        If a particular process and user ID has not been granted\n permission to access a specific URI, throw SecurityException.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        String[]\n    \n  \n    \n      \n      fileList()\n      \n      \n        Returns an array of strings naming the private files associated with\n this Context's application package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Context\n    \n  \n    \n      \n      getApplicationContext()\n      \n      \n        Return the context of the single, global Application object of the\n current process.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        ApplicationInfo\n    \n  \n    \n      \n      getApplicationInfo()\n      \n      \n        Return the full application info for this context's package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        AssetManager\n    \n  \n    \n      \n      getAssets()\n      \n      \n        Returns an AssetManager instance for the application's package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getCacheDir()\n      \n      \n        Returns the absolute path to the application specific cache directory on\n the filesystem.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        ClassLoader\n    \n  \n    \n      \n      getClassLoader()\n      \n      \n        Return a class loader you can use to retrieve classes in this package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getCodeCacheDir()\n      \n      \n        Returns the absolute path to the application specific cache directory on\n the filesystem designed for storing cached code.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        int\n    \n  \n    \n      \n      getColor(int id)\n      \n      \n        Returns a color associated with a particular resource ID and styled for\n the current theme.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        ColorStateList\n    \n  \n    \n      \n      getColorStateList(int id)\n      \n      \n        Returns a color state list associated with a particular resource ID and\n styled for the current theme.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        ContentResolver\n    \n  \n    \n      \n      getContentResolver()\n      \n      \n        Return a ContentResolver instance for your application's package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getDataDir()\n      \n      \n        Returns the absolute path to the directory on the filesystem where all\n private files belonging to this app are stored.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getDatabasePath(String name)\n      \n      \n        Returns the absolute path on the filesystem where a database created with\n openOrCreateDatabase(String, int, SQLiteDatabase.CursorFactory) is stored.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getDir(String name, int mode)\n      \n      \n        Retrieve, creating if needed, a new directory in which the application\n can place its own custom data files.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        Drawable\n    \n  \n    \n      \n      getDrawable(int id)\n      \n      \n        Returns a drawable object associated with a particular resource ID and\n styled for the current theme.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getExternalCacheDir()\n      \n      \n        Returns absolute path to application-specific directory on the primary\n shared/external storage device where the application can place cache\n files it owns.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File[]\n    \n  \n    \n      \n      getExternalCacheDirs()\n      \n      \n        Returns absolute paths to application-specific directories on all\n shared/external storage devices where the application can place cache\n files it owns.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getExternalFilesDir(String type)\n      \n      \n        Returns the absolute path to the directory on the primary shared/external\n storage device where the application can place persistent files it owns.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File[]\n    \n  \n    \n      \n      getExternalFilesDirs(String type)\n      \n      \n        Returns absolute paths to application-specific directories on all\n shared/external storage devices where the application can place\n persistent files it owns.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File[]\n    \n  \n    \n      \n      getExternalMediaDirs()\n      \n      \n        Returns absolute paths to application-specific directories on all\n shared/external storage devices where the application can place media\n files.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getFileStreamPath(String name)\n      \n      \n        Returns the absolute path on the filesystem where a file created with\n openFileOutput(String, int) is stored.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getFilesDir()\n      \n      \n        Returns the absolute path to the directory on the filesystem where files\n created with openFileOutput(String, int) are stored.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Executor\n    \n  \n    \n      \n      getMainExecutor()\n      \n      \n        Return an Executor that will run enqueued tasks on the main\n thread associated with this context.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Looper\n    \n  \n    \n      \n      getMainLooper()\n      \n      \n        Return the Looper for the main thread of the current process.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getNoBackupFilesDir()\n      \n      \n        Returns the absolute path to the directory on the filesystem similar to\n getFilesDir().\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File\n    \n  \n    \n      \n      getObbDir()\n      \n      \n        Return the primary shared/external storage directory where this\n application's OBB files (if there are any) can be found.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        File[]\n    \n  \n    \n      \n      getObbDirs()\n      \n      \n        Returns absolute paths to application-specific directories on all\n shared/external storage devices where the application's OBB files (if\n there are any) can be found.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        String\n    \n  \n    \n      \n      getOpPackageName()\n      \n      \n        Return the package name that should be used for AppOpsManager calls from\n this context, so that app ops manager's uid verification will work with the name.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        String\n    \n  \n    \n      \n      getPackageCodePath()\n      \n      \n        Return the full path to this context's primary Android package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        PackageManager\n    \n  \n    \n      \n      getPackageManager()\n      \n      \n        Return PackageManager instance to find global package information.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        String\n    \n  \n    \n      \n      getPackageName()\n      \n      \n        Return the name of this application's package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        String\n    \n  \n    \n      \n      getPackageResourcePath()\n      \n      \n        Return the full path to this context's primary Android package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Resources\n    \n  \n    \n      \n      getResources()\n      \n      \n        Returns a Resources instance for the application's package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        SharedPreferences\n    \n  \n    \n      \n      getSharedPreferences(String name, int mode)\n      \n      \n        Retrieve and hold the contents of the preferences file 'name', returning\n a SharedPreferences through which you can retrieve and modify its\n values.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        String\n    \n  \n    \n      \n      getString(int resId, Object... formatArgs)\n      \n      \n        Returns a localized formatted string from the application's package's\n default string table, substituting the format arguments as defined in\n Formatter and String.format(String, Object...).\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        String\n    \n  \n    \n      \n      getString(int resId)\n      \n      \n        Returns a localized string from the application's package's\n default string table.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        <T>\n        T\n    \n  \n    \n      \n      getSystemService(Class<T> serviceClass)\n      \n      \n        Return the handle to a system-level service by class.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Object\n    \n  \n    \n      \n      getSystemService(String name)\n      \n      \n        Return the handle to a system-level service by name.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        String\n    \n  \n    \n      \n      getSystemServiceName(Class<?> serviceClass)\n      \n      \n        Gets the name of the system-level service that is represented by the specified class.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        CharSequence\n    \n  \n    \n      \n      getText(int resId)\n      \n      \n        Return a localized, styled CharSequence from the application's package's\n default string table.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Resources.Theme\n    \n  \n    \n      \n      getTheme()\n      \n      \n        Return the Theme object associated with this Context.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Drawable\n    \n  \n    \n      \n      getWallpaper()\n      \n      \n        \n      This method was deprecated\n      in API level 15.\n    Use WallpaperManager.get() instead.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      getWallpaperDesiredMinimumHeight()\n      \n      \n        \n      This method was deprecated\n      in API level 15.\n    Use WallpaperManager.getDesiredMinimumHeight() instead.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      getWallpaperDesiredMinimumWidth()\n      \n      \n        \n      This method was deprecated\n      in API level 15.\n    Use WallpaperManager.getDesiredMinimumWidth() instead.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      grantUriPermission(String toPackage, Uri uri, int modeFlags)\n      \n      \n        Grant permission to access a specific Uri to another package, regardless\n of whether that package has general permission to access the Uri's\n content provider.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      isDeviceProtectedStorage()\n      \n      \n        Indicates if the storage APIs of this Context are backed by\n device-protected storage.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      isRestricted()\n      \n      \n        Indicates whether this Context is restricted.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      moveDatabaseFrom(Context sourceContext, String name)\n      \n      \n        Move an existing database file from the given source storage context to\n this context.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      moveSharedPreferencesFrom(Context sourceContext, String name)\n      \n      \n        Move an existing shared preferences file from the given source storage\n context to this context.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        TypedArray\n    \n  \n    \n      \n      obtainStyledAttributes(AttributeSet set, int[] attrs)\n      \n      \n        Retrieve styled attribute information in this Context's theme.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        TypedArray\n    \n  \n    \n      \n      obtainStyledAttributes(AttributeSet set, int[] attrs, int defStyleAttr, int defStyleRes)\n      \n      \n        Retrieve styled attribute information in this Context's theme.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        TypedArray\n    \n  \n    \n      \n      obtainStyledAttributes(int resid, int[] attrs)\n      \n      \n        Retrieve styled attribute information in this Context's theme.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        TypedArray\n    \n  \n    \n      \n      obtainStyledAttributes(int[] attrs)\n      \n      \n        Retrieve styled attribute information in this Context's theme.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        FileInputStream\n    \n  \n    \n      \n      openFileInput(String name)\n      \n      \n        Open a private file associated with this Context's application package\n for reading.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        FileOutputStream\n    \n  \n    \n      \n      openFileOutput(String name, int mode)\n      \n      \n        Open a private file associated with this Context's application package\n for writing.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        SQLiteDatabase\n    \n  \n    \n      \n      openOrCreateDatabase(String name, int mode, SQLiteDatabase.CursorFactory factory, DatabaseErrorHandler errorHandler)\n      \n      \n        Open a new private SQLiteDatabase associated with this Context's\n application package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        SQLiteDatabase\n    \n  \n    \n      \n      openOrCreateDatabase(String name, int mode, SQLiteDatabase.CursorFactory factory)\n      \n      \n        Open a new private SQLiteDatabase associated with this Context's\n application package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Drawable\n    \n  \n    \n      \n      peekWallpaper()\n      \n      \n        \n      This method was deprecated\n      in API level 15.\n    Use WallpaperManager.peek() instead.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      registerComponentCallbacks(ComponentCallbacks callback)\n      \n      \n        Add a new ComponentCallbacks to the base application of the\n Context, which will be called at the same times as the ComponentCallbacks\n methods of activities and other components are called.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Intent\n    \n  \n    \n      \n      registerReceiver(BroadcastReceiver receiver, IntentFilter filter)\n      \n      \n        Register a BroadcastReceiver to be run in the main activity thread.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Intent\n    \n  \n    \n      \n      registerReceiver(BroadcastReceiver receiver, IntentFilter filter, int flags)\n      \n      \n        Register to receive intent broadcasts, with the receiver optionally being\n exposed to Instant Apps.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Intent\n    \n  \n    \n      \n      registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler, int flags)\n      \n      \n        Register to receive intent broadcasts, to run in the context of\n scheduler.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        Intent\n    \n  \n    \n      \n      registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler)\n      \n      \n        Register to receive intent broadcasts, to run in the context of\n scheduler.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      removeStickyBroadcast(Intent intent)\n      \n      \n        \n      This method was deprecated\n      in API level 21.\n    Sticky broadcasts should not be used.  They provide no security (anyone\n can access them), no protection (anyone can modify them), and many other problems.\n The recommended pattern is to use a non-sticky broadcast to report that something\n has changed, with another mechanism for apps to retrieve the current value whenever\n desired.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      removeStickyBroadcastAsUser(Intent intent, UserHandle user)\n      \n      \n        \n      This method was deprecated\n      in API level 21.\n    Sticky broadcasts should not be used.  They provide no security (anyone\n can access them), no protection (anyone can modify them), and many other problems.\n The recommended pattern is to use a non-sticky broadcast to report that something\n has changed, with another mechanism for apps to retrieve the current value whenever\n desired.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      revokeUriPermission(Uri uri, int modeFlags)\n      \n      \n        Remove all permissions to access a particular content provider Uri\n that were previously added with grantUriPermission(String, Uri, int) or any other mechanism.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      revokeUriPermission(String toPackage, Uri uri, int modeFlags)\n      \n      \n        Remove permissions to access a particular content provider Uri\n that were previously added with grantUriPermission(String, Uri, int) for a specific target\n package.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendBroadcast(Intent intent, String receiverPermission)\n      \n      \n        Broadcast the given intent to all interested BroadcastReceivers, allowing\n an optional required permission to be enforced.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendBroadcast(Intent intent)\n      \n      \n        Broadcast the given intent to all interested BroadcastReceivers.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendBroadcastAsUser(Intent intent, UserHandle user)\n      \n      \n        Version of sendBroadcast(android.content.Intent) that allows you to specify the\n user the broadcast will be sent to.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission)\n      \n      \n        Version of sendBroadcast(android.content.Intent, java.lang.String) that allows you to specify the\n user the broadcast will be sent to.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendOrderedBroadcast(Intent intent, String receiverPermission, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)\n      \n      \n        Version of sendBroadcast(android.content.Intent) that allows you to\n receive data back from the broadcast.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendOrderedBroadcast(Intent intent, String receiverPermission)\n      \n      \n        Broadcast the given intent to all interested BroadcastReceivers, delivering\n them one at a time to allow more preferred receivers to consume the\n broadcast before it is delivered to less preferred receivers.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendOrderedBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)\n      \n      \n        Version of\n sendOrderedBroadcast(android.content.Intent, java.lang.String, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)\n that allows you to specify the\n user the broadcast will be sent to.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendStickyBroadcast(Intent intent)\n      \n      \n        \n      This method was deprecated\n      in API level 21.\n    Sticky broadcasts should not be used.  They provide no security (anyone\n can access them), no protection (anyone can modify them), and many other problems.\n The recommended pattern is to use a non-sticky broadcast to report that something\n has changed, with another mechanism for apps to retrieve the current value whenever\n desired.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendStickyBroadcastAsUser(Intent intent, UserHandle user)\n      \n      \n        \n      This method was deprecated\n      in API level 21.\n    Sticky broadcasts should not be used.  They provide no security (anyone\n can access them), no protection (anyone can modify them), and many other problems.\n The recommended pattern is to use a non-sticky broadcast to report that something\n has changed, with another mechanism for apps to retrieve the current value whenever\n desired.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendStickyOrderedBroadcast(Intent intent, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)\n      \n      \n        \n      This method was deprecated\n      in API level 21.\n    Sticky broadcasts should not be used.  They provide no security (anyone\n can access them), no protection (anyone can modify them), and many other problems.\n The recommended pattern is to use a non-sticky broadcast to report that something\n has changed, with another mechanism for apps to retrieve the current value whenever\n desired.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      sendStickyOrderedBroadcastAsUser(Intent intent, UserHandle user, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)\n      \n      \n        \n      This method was deprecated\n      in API level 21.\n    Sticky broadcasts should not be used.  They provide no security (anyone\n can access them), no protection (anyone can modify them), and many other problems.\n The recommended pattern is to use a non-sticky broadcast to report that something\n has changed, with another mechanism for apps to retrieve the current value whenever\n desired.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      setTheme(int resid)\n      \n      \n        Set the base theme for this context.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      setWallpaper(Bitmap bitmap)\n      \n      \n        \n      This method was deprecated\n      in API level 15.\n    Use WallpaperManager.set() instead.\n This method requires the caller to hold the permission\n Manifest.permission.SET_WALLPAPER.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      setWallpaper(InputStream data)\n      \n      \n        \n      This method was deprecated\n      in API level 15.\n    Use WallpaperManager.set() instead.\n This method requires the caller to hold the permission\n Manifest.permission.SET_WALLPAPER.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      startActivities(Intent[] intents, Bundle options)\n      \n      \n        Launch multiple new activities.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      startActivities(Intent[] intents)\n      \n      \n        Same as startActivities(android.content.Intent[], android.os.Bundle) with no options\n specified.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      startActivity(Intent intent)\n      \n      \n        Same as startActivity(android.content.Intent, android.os.Bundle) with no options\n specified.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      startActivity(Intent intent, Bundle options)\n      \n      \n        Launch a new activity.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        ComponentName\n    \n  \n    \n      \n      startForegroundService(Intent service)\n      \n      \n        Similar to startService(android.content.Intent), but with an implicit promise that the\n Service will call startForeground(int, android.app.Notification) once it begins running.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      startInstrumentation(ComponentName className, String profileFile, Bundle arguments)\n      \n      \n        Start executing an Instrumentation class.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      startIntentSender(IntentSender intent, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags)\n      \n      \n        Same as startIntentSender(android.content.IntentSender, android.content.Intent, int, int, int, android.os.Bundle)\n with no options specified.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      startIntentSender(IntentSender intent, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options)\n      \n      \n        Like startActivity(android.content.Intent, android.os.Bundle), but taking a IntentSender\n to start.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        ComponentName\n    \n  \n    \n      \n      startService(Intent service)\n      \n      \n        Request that a given application service be started.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      stopService(Intent service)\n      \n      \n        Request that a given application service be stopped.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      unbindService(ServiceConnection conn)\n      \n      \n        Disconnect from an application service.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      unregisterComponentCallbacks(ComponentCallbacks callback)\n      \n      \n        Remove a ComponentCallbacks object that was previously registered\n with registerComponentCallbacks(android.content.ComponentCallbacks).\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      unregisterReceiver(BroadcastReceiver receiver)\n      \n      \n        Unregister a previously registered BroadcastReceiver.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      updateServiceGroup(ServiceConnection conn, int group, int importance)\n      \n      \n        For a service previously bound with bindService(Intent, ServiceConnection, int) or a related method, change\n how the system manages that service's process in relation to other processes.\n        \n    \n\n      \n    \n  \n  \n\n\n    \n  \n\n\n\n\n\n\n  \n    From class\n      \n        \n          java.lang.Object\n        \n      \n    \n    \n      \n\n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        Object\n    \n  \n    \n      \n      clone()\n      \n      \n        Creates and returns a copy of this object.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      equals(Object obj)\n      \n      \n        Indicates whether some other object is \"equal to\" this one.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      finalize()\n      \n      \n        Called by the garbage collector on an object when garbage collection\n determines that there are no more references to the object.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        Class<?>\n    \n  \n    \n      \n      getClass()\n      \n      \n        Returns the runtime class of this Object.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        int\n    \n  \n    \n      \n      hashCode()\n      \n      \n        Returns a hash code value for the object.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        void\n    \n  \n    \n      \n      notify()\n      \n      \n        Wakes up a single thread that is waiting on this object's\n monitor.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        void\n    \n  \n    \n      \n      notifyAll()\n      \n      \n        Wakes up all threads that are waiting on this object's monitor.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        \n        \n        String\n    \n  \n    \n      \n      toString()\n      \n      \n        Returns a string representation of the object.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        void\n    \n  \n    \n      \n      wait(long timeout, int nanos)\n      \n      \n        Causes the current thread to wait until another thread invokes the\n notify() method or the\n notifyAll() method for this object, or\n some other thread interrupts the current thread, or a certain\n amount of real time has elapsed.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        void\n    \n  \n    \n      \n      wait(long timeout)\n      \n      \n        Causes the current thread to wait until either another thread invokes the\n notify() method or the\n notifyAll() method for this object, or a\n specified amount of time has elapsed.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        \n        \n        \n        final\n        \n        void\n    \n  \n    \n      \n      wait()\n      \n      \n        Causes the current thread to wait until another thread invokes the\n notify() method or the\n notifyAll() method for this object.\n        \n    \n\n      \n    \n  \n  \n\n\n    \n  \n\n\n\n\n\n\n  \n    From interface\n      \n        \n          android.view.KeyEvent.Callback\n        \n      \n    \n    \n      \n\n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      onKeyDown(int keyCode, KeyEvent event)\n      \n      \n        Called when a key down event has occurred.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      onKeyLongPress(int keyCode, KeyEvent event)\n      \n      \n        Called when a long press has occurred.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      onKeyMultiple(int keyCode, int count, KeyEvent event)\n      \n      \n        Called when a user's interaction with an analog control, such as\n flinging a trackball, generates simulated down/up events for the same\n key multiple times in quick succession.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        boolean\n    \n  \n    \n      \n      onKeyUp(int keyCode, KeyEvent event)\n      \n      \n        Called when a key up event has occurred.\n        \n    \n\n      \n    \n  \n  \n\n\n    \n  \n\n\n\n\n\n\n  \n    From interface\n      \n        \n          android.content.ComponentCallbacks2\n        \n      \n    \n    \n      \n\n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      onTrimMemory(int level)\n      \n      \n        Called when the operating system has determined that it is a good\n time for a process to trim unneeded memory from its process.\n        \n    \n\n      \n    \n  \n  \n\n\n    \n  \n\n\n\n\n\n\n  \n    From interface\n      \n        \n          android.content.ComponentCallbacks\n        \n      \n    \n    \n      \n\n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      onConfigurationChanged(Configuration newConfig)\n      \n      \n        Called by the system when the device configuration changes while your\n component is running.\n        \n    \n\n      \n    \n  \n  \n\n  \n  \n  \n    \n        abstract\n        \n        \n        \n        \n        void\n    \n  \n    \n      \n      onLowMemory()\n      \n      \n        This is called when the overall system is running low on memory, and\n actively running processes should trim their memory usage."
    },
    {
        "class": "android.view.inputmethod.InputMethodManager",
        "api": "setCurrentInputMethodSubtype",
        "permissionText": "This method was deprecated\n      in API level 29.\n    If the calling process is an IME, use\n             InputMethodService#switchInputMethod(String, InputMethodSubtype), which\n             does not require any permission as long as the caller is the current IME.\n             If the calling process is some privileged app that already has\n             Manifest.permission.WRITE_SECURE_SETTINGS permission, just\n             directly update Settings.Secure#SELECTED_INPUT_METHOD_SUBTYPE."
    },
    {
        "class": "android.view.inputmethod.InputMethodManager",
        "api": "setInputMethod",
        "permissionText": "On Android Build.VERSION_CODES#Q and later devices, the undocumented behavior that\n token can be null when the caller has\n Manifest.permission.WRITE_SECURE_SETTINGS is deprecated. Instead, update\n Settings.Secure.DEFAULT_INPUT_METHOD and\n Settings.Secure.SELECTED_INPUT_METHOD_SUBTYPE directly."
    },
    {
        "class": "android.view.inputmethod.InputMethodManager",
        "api": "setInputMethodAndSubtype",
        "permissionText": "On Android Build.VERSION_CODES#Q and later devices, token cannot be\n null even with Manifest.permission.WRITE_SECURE_SETTINGS. Instead,\n update Settings.Secure.DEFAULT_INPUT_METHOD and\n Settings.Secure.SELECTED_INPUT_METHOD_SUBTYPE directly."
    },
    {
        "class": "android.view.inputmethod.InputMethod",
        "api": "SERVICE_INTERFACE",
        "permissionText": "This is the interface name that a service implementing an input\n method should say that it supports -- that is, this is the action it\n uses for its intent filter.\n To be supported, the service must also require the\n Manifest.permission.BIND_INPUT_METHOD permission so\n that other applications can not abuse it."
    },
    {
        "class": "android.net.wifi.aware.IdentityChangedListener",
        "api": "onIdentityChanged",
        "permissionText": "Parameters\n      \n        mac\n        \n          byte: The MAC address of the Aware discovery interface. The application must have the\n Manifest.permission.ACCESS_FINE_LOCATION to get the actual MAC address,\n            otherwise all 0's will be provided."
    },
    {
        "class": "android.app.Fragment",
        "api": "android:fragmentAllowEnterTransitionOverlap",
        "permissionText": "requestPermissions\n    \n      \n    Added in API level 23\n  Deprecated in\n    API level\n      28\n  \n      \n  \n\n    \npublic final void requestPermissions (String[] permissions, \n                int requestCode)\n    \n    \n\n    \n  Requests permissions to be granted to this application. These permissions\n must be requested in your manifest, they should not be granted to your app,\n and they should have protection level #PROTECTION_DANGEROUS dangerous, regardless whether they are declared by\n the platform or a third-party app.\n \n Normal permissions PermissionInfo.PROTECTION_NORMAL\n are granted at install time if requested in the manifest. Signature permissions\n PermissionInfo.PROTECTION_SIGNATURE are granted at\n install time if requested in the manifest and the signature of your app matches\n the signature of the app declaring the permissions.\n \n \n If your app does not have the requested permissions the user will be presented\n with UI for accepting them. After the user has accepted or rejected the\n requested permissions you will receive a callback on onRequestPermissionsResult(int, java.lang.String[], int[]) reporting whether the\n permissions were granted or not.\n \n \n Note that requesting a permission does not guarantee it will be granted and\n your app should be able to run without having this permission.\n \n \n This method may start an activity allowing the user to choose which permissions\n to grant and which to reject. Hence, you should be prepared that your activity\n may be paused and resumed. Further, granting some permissions may require\n a restart of you application. In such a case, the system will recreate the\n activity stack before delivering the result to onRequestPermissionsResult(int, java.lang.String[], int[]).\n \n \n When checking whether you have a permission you should use Context.checkSelfPermission(String).\n \n \n Calling this API for permissions already granted to your app would show UI\n to the user to decide whether the app can still hold these permissions. This\n can be useful if the way your app uses data guarded by the permissions\n changes significantly.\n \n \n You cannot request a permission if your activity sets noHistory to\n true because in this case the activity would not receive\n result callbacks including onRequestPermissionsResult(int, java.lang.String[], int[]).\n \n \n A sample permissions request looks like this:\n \n \n private void showContacts() {\n     if (getActivity().checkSelfPermission(Manifest.permission.READ_CONTACTS)\n             != PackageManager.PERMISSION_GRANTED) {\n         requestPermissions(new String[]{Manifest.permission.READ_CONTACTS},\n                 PERMISSIONS_REQUEST_READ_CONTACTS);\n     } else {\n         doShowContacts();\n     }\n }\n\n @Override\n public void onRequestPermissionsResult(int requestCode, String[] permissions,\n         int[] grantResults) {\n     if (requestCode == PERMISSIONS_REQUEST_READ_CONTACTS\n             && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n         doShowContacts();\n     }\n }\n \n    \n    Parameters\n      \n        permissions\n        \n          String: The requested permissions. Must me non-null and not empty.\n This value must never be null.\n      \n      \n        requestCode\n        \n          int: Application specific request code to match with a result\n    reported to onRequestPermissionsResult(int, java.lang.String[], int[]).\n    Should be >= 0.\n      \n    \n  \n      See also:\n      onRequestPermissionsResult(int, String[], int[])Context.checkSelfPermission(String)"
    },
    {
        "class": "android.app.Fragment",
        "api": "android:fragmentAllowReturnTransitionOverlap",
        "permissionText": "requestPermissions\n    \n      \n    Added in API level 23\n  Deprecated in\n    API level\n      28\n  \n      \n  \n\n    \npublic final void requestPermissions (String[] permissions, \n                int requestCode)\n    \n    \n\n    \n  Requests permissions to be granted to this application. These permissions\n must be requested in your manifest, they should not be granted to your app,\n and they should have protection level #PROTECTION_DANGEROUS dangerous, regardless whether they are declared by\n the platform or a third-party app.\n \n Normal permissions PermissionInfo.PROTECTION_NORMAL\n are granted at install time if requested in the manifest. Signature permissions\n PermissionInfo.PROTECTION_SIGNATURE are granted at\n install time if requested in the manifest and the signature of your app matches\n the signature of the app declaring the permissions.\n \n \n If your app does not have the requested permissions the user will be presented\n with UI for accepting them. After the user has accepted or rejected the\n requested permissions you will receive a callback on onRequestPermissionsResult(int, java.lang.String[], int[]) reporting whether the\n permissions were granted or not.\n \n \n Note that requesting a permission does not guarantee it will be granted and\n your app should be able to run without having this permission.\n \n \n This method may start an activity allowing the user to choose which permissions\n to grant and which to reject. Hence, you should be prepared that your activity\n may be paused and resumed. Further, granting some permissions may require\n a restart of you application. In such a case, the system will recreate the\n activity stack before delivering the result to onRequestPermissionsResult(int, java.lang.String[], int[]).\n \n \n When checking whether you have a permission you should use Context.checkSelfPermission(String).\n \n \n Calling this API for permissions already granted to your app would show UI\n to the user to decide whether the app can still hold these permissions. This\n can be useful if the way your app uses data guarded by the permissions\n changes significantly.\n \n \n You cannot request a permission if your activity sets noHistory to\n true because in this case the activity would not receive\n result callbacks including onRequestPermissionsResult(int, java.lang.String[], int[]).\n \n \n A sample permissions request looks like this:\n \n \n private void showContacts() {\n     if (getActivity().checkSelfPermission(Manifest.permission.READ_CONTACTS)\n             != PackageManager.PERMISSION_GRANTED) {\n         requestPermissions(new String[]{Manifest.permission.READ_CONTACTS},\n                 PERMISSIONS_REQUEST_READ_CONTACTS);\n     } else {\n         doShowContacts();\n     }\n }\n\n @Override\n public void onRequestPermissionsResult(int requestCode, String[] permissions,\n         int[] grantResults) {\n     if (requestCode == PERMISSIONS_REQUEST_READ_CONTACTS\n             && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n         doShowContacts();\n     }\n }\n \n    \n    Parameters\n      \n        permissions\n        \n          String: The requested permissions. Must me non-null and not empty.\n This value must never be null.\n      \n      \n        requestCode\n        \n          int: Application specific request code to match with a result\n    reported to onRequestPermissionsResult(int, java.lang.String[], int[]).\n    Should be >= 0.\n      \n    \n  \n      See also:\n      onRequestPermissionsResult(int, String[], int[])Context.checkSelfPermission(String)"
    },
    {
        "class": "android.app.Fragment",
        "api": "android:fragmentEnterTransition",
        "permissionText": "requestPermissions\n    \n      \n    Added in API level 23\n  Deprecated in\n    API level\n      28\n  \n      \n  \n\n    \npublic final void requestPermissions (String[] permissions, \n                int requestCode)\n    \n    \n\n    \n  Requests permissions to be granted to this application. These permissions\n must be requested in your manifest, they should not be granted to your app,\n and they should have protection level #PROTECTION_DANGEROUS dangerous, regardless whether they are declared by\n the platform or a third-party app.\n \n Normal permissions PermissionInfo.PROTECTION_NORMAL\n are granted at install time if requested in the manifest. Signature permissions\n PermissionInfo.PROTECTION_SIGNATURE are granted at\n install time if requested in the manifest and the signature of your app matches\n the signature of the app declaring the permissions.\n \n \n If your app does not have the requested permissions the user will be presented\n with UI for accepting them. After the user has accepted or rejected the\n requested permissions you will receive a callback on onRequestPermissionsResult(int, java.lang.String[], int[]) reporting whether the\n permissions were granted or not.\n \n \n Note that requesting a permission does not guarantee it will be granted and\n your app should be able to run without having this permission.\n \n \n This method may start an activity allowing the user to choose which permissions\n to grant and which to reject. Hence, you should be prepared that your activity\n may be paused and resumed. Further, granting some permissions may require\n a restart of you application. In such a case, the system will recreate the\n activity stack before delivering the result to onRequestPermissionsResult(int, java.lang.String[], int[]).\n \n \n When checking whether you have a permission you should use Context.checkSelfPermission(String).\n \n \n Calling this API for permissions already granted to your app would show UI\n to the user to decide whether the app can still hold these permissions. This\n can be useful if the way your app uses data guarded by the permissions\n changes significantly.\n \n \n You cannot request a permission if your activity sets noHistory to\n true because in this case the activity would not receive\n result callbacks including onRequestPermissionsResult(int, java.lang.String[], int[]).\n \n \n A sample permissions request looks like this:\n \n \n private void showContacts() {\n     if (getActivity().checkSelfPermission(Manifest.permission.READ_CONTACTS)\n             != PackageManager.PERMISSION_GRANTED) {\n         requestPermissions(new String[]{Manifest.permission.READ_CONTACTS},\n                 PERMISSIONS_REQUEST_READ_CONTACTS);\n     } else {\n         doShowContacts();\n     }\n }\n\n @Override\n public void onRequestPermissionsResult(int requestCode, String[] permissions,\n         int[] grantResults) {\n     if (requestCode == PERMISSIONS_REQUEST_READ_CONTACTS\n             && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n         doShowContacts();\n     }\n }\n \n    \n    Parameters\n      \n        permissions\n        \n          String: The requested permissions. Must me non-null and not empty.\n This value must never be null.\n      \n      \n        requestCode\n        \n          int: Application specific request code to match with a result\n    reported to onRequestPermissionsResult(int, java.lang.String[], int[]).\n    Should be >= 0.\n      \n    \n  \n      See also:\n      onRequestPermissionsResult(int, String[], int[])Context.checkSelfPermission(String)"
    },
    {
        "class": "android.app.Fragment",
        "api": "android:fragmentExitTransition",
        "permissionText": "requestPermissions\n    \n      \n    Added in API level 23\n  Deprecated in\n    API level\n      28\n  \n      \n  \n\n    \npublic final void requestPermissions (String[] permissions, \n                int requestCode)\n    \n    \n\n    \n  Requests permissions to be granted to this application. These permissions\n must be requested in your manifest, they should not be granted to your app,\n and they should have protection level #PROTECTION_DANGEROUS dangerous, regardless whether they are declared by\n the platform or a third-party app.\n \n Normal permissions PermissionInfo.PROTECTION_NORMAL\n are granted at install time if requested in the manifest. Signature permissions\n PermissionInfo.PROTECTION_SIGNATURE are granted at\n install time if requested in the manifest and the signature of your app matches\n the signature of the app declaring the permissions.\n \n \n If your app does not have the requested permissions the user will be presented\n with UI for accepting them. After the user has accepted or rejected the\n requested permissions you will receive a callback on onRequestPermissionsResult(int, java.lang.String[], int[]) reporting whether the\n permissions were granted or not.\n \n \n Note that requesting a permission does not guarantee it will be granted and\n your app should be able to run without having this permission.\n \n \n This method may start an activity allowing the user to choose which permissions\n to grant and which to reject. Hence, you should be prepared that your activity\n may be paused and resumed. Further, granting some permissions may require\n a restart of you application. In such a case, the system will recreate the\n activity stack before delivering the result to onRequestPermissionsResult(int, java.lang.String[], int[]).\n \n \n When checking whether you have a permission you should use Context.checkSelfPermission(String).\n \n \n Calling this API for permissions already granted to your app would show UI\n to the user to decide whether the app can still hold these permissions. This\n can be useful if the way your app uses data guarded by the permissions\n changes significantly.\n \n \n You cannot request a permission if your activity sets noHistory to\n true because in this case the activity would not receive\n result callbacks including onRequestPermissionsResult(int, java.lang.String[], int[]).\n \n \n A sample permissions request looks like this:\n \n \n private void showContacts() {\n     if (getActivity().checkSelfPermission(Manifest.permission.READ_CONTACTS)\n             != PackageManager.PERMISSION_GRANTED) {\n         requestPermissions(new String[]{Manifest.permission.READ_CONTACTS},\n                 PERMISSIONS_REQUEST_READ_CONTACTS);\n     } else {\n         doShowContacts();\n     }\n }\n\n @Override\n public void onRequestPermissionsResult(int requestCode, String[] permissions,\n         int[] grantResults) {\n     if (requestCode == PERMISSIONS_REQUEST_READ_CONTACTS\n             && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n         doShowContacts();\n     }\n }\n \n    \n    Parameters\n      \n        permissions\n        \n          String: The requested permissions. Must me non-null and not empty.\n This value must never be null.\n      \n      \n        requestCode\n        \n          int: Application specific request code to match with a result\n    reported to onRequestPermissionsResult(int, java.lang.String[], int[]).\n    Should be >= 0.\n      \n    \n  \n      See also:\n      onRequestPermissionsResult(int, String[], int[])Context.checkSelfPermission(String)"
    },
    {
        "class": "android.app.Fragment",
        "api": "android:fragmentReenterTransition",
        "permissionText": "requestPermissions\n    \n      \n    Added in API level 23\n  Deprecated in\n    API level\n      28\n  \n      \n  \n\n    \npublic final void requestPermissions (String[] permissions, \n                int requestCode)\n    \n    \n\n    \n  Requests permissions to be granted to this application. These permissions\n must be requested in your manifest, they should not be granted to your app,\n and they should have protection level #PROTECTION_DANGEROUS dangerous, regardless whether they are declared by\n the platform or a third-party app.\n \n Normal permissions PermissionInfo.PROTECTION_NORMAL\n are granted at install time if requested in the manifest. Signature permissions\n PermissionInfo.PROTECTION_SIGNATURE are granted at\n install time if requested in the manifest and the signature of your app matches\n the signature of the app declaring the permissions.\n \n \n If your app does not have the requested permissions the user will be presented\n with UI for accepting them. After the user has accepted or rejected the\n requested permissions you will receive a callback on onRequestPermissionsResult(int, java.lang.String[], int[]) reporting whether the\n permissions were granted or not.\n \n \n Note that requesting a permission does not guarantee it will be granted and\n your app should be able to run without having this permission.\n \n \n This method may start an activity allowing the user to choose which permissions\n to grant and which to reject. Hence, you should be prepared that your activity\n may be paused and resumed. Further, granting some permissions may require\n a restart of you application. In such a case, the system will recreate the\n activity stack before delivering the result to onRequestPermissionsResult(int, java.lang.String[], int[]).\n \n \n When checking whether you have a permission you should use Context.checkSelfPermission(String).\n \n \n Calling this API for permissions already granted to your app would show UI\n to the user to decide whether the app can still hold these permissions. This\n can be useful if the way your app uses data guarded by the permissions\n changes significantly.\n \n \n You cannot request a permission if your activity sets noHistory to\n true because in this case the activity would not receive\n result callbacks including onRequestPermissionsResult(int, java.lang.String[], int[]).\n \n \n A sample permissions request looks like this:\n \n \n private void showContacts() {\n     if (getActivity().checkSelfPermission(Manifest.permission.READ_CONTACTS)\n             != PackageManager.PERMISSION_GRANTED) {\n         requestPermissions(new String[]{Manifest.permission.READ_CONTACTS},\n                 PERMISSIONS_REQUEST_READ_CONTACTS);\n     } else {\n         doShowContacts();\n     }\n }\n\n @Override\n public void onRequestPermissionsResult(int requestCode, String[] permissions,\n         int[] grantResults) {\n     if (requestCode == PERMISSIONS_REQUEST_READ_CONTACTS\n             && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n         doShowContacts();\n     }\n }\n \n    \n    Parameters\n      \n        permissions\n        \n          String: The requested permissions. Must me non-null and not empty.\n This value must never be null.\n      \n      \n        requestCode\n        \n          int: Application specific request code to match with a result\n    reported to onRequestPermissionsResult(int, java.lang.String[], int[]).\n    Should be >= 0.\n      \n    \n  \n      See also:\n      onRequestPermissionsResult(int, String[], int[])Context.checkSelfPermission(String)"
    },
    {
        "class": "android.app.Fragment",
        "api": "android:fragmentSharedElementEnterTransition",
        "permissionText": "requestPermissions\n    \n      \n    Added in API level 23\n  Deprecated in\n    API level\n      28\n  \n      \n  \n\n    \npublic final void requestPermissions (String[] permissions, \n                int requestCode)\n    \n    \n\n    \n  Requests permissions to be granted to this application. These permissions\n must be requested in your manifest, they should not be granted to your app,\n and they should have protection level #PROTECTION_DANGEROUS dangerous, regardless whether they are declared by\n the platform or a third-party app.\n \n Normal permissions PermissionInfo.PROTECTION_NORMAL\n are granted at install time if requested in the manifest. Signature permissions\n PermissionInfo.PROTECTION_SIGNATURE are granted at\n install time if requested in the manifest and the signature of your app matches\n the signature of the app declaring the permissions.\n \n \n If your app does not have the requested permissions the user will be presented\n with UI for accepting them. After the user has accepted or rejected the\n requested permissions you will receive a callback on onRequestPermissionsResult(int, java.lang.String[], int[]) reporting whether the\n permissions were granted or not.\n \n \n Note that requesting a permission does not guarantee it will be granted and\n your app should be able to run without having this permission.\n \n \n This method may start an activity allowing the user to choose which permissions\n to grant and which to reject. Hence, you should be prepared that your activity\n may be paused and resumed. Further, granting some permissions may require\n a restart of you application. In such a case, the system will recreate the\n activity stack before delivering the result to onRequestPermissionsResult(int, java.lang.String[], int[]).\n \n \n When checking whether you have a permission you should use Context.checkSelfPermission(String).\n \n \n Calling this API for permissions already granted to your app would show UI\n to the user to decide whether the app can still hold these permissions. This\n can be useful if the way your app uses data guarded by the permissions\n changes significantly.\n \n \n You cannot request a permission if your activity sets noHistory to\n true because in this case the activity would not receive\n result callbacks including onRequestPermissionsResult(int, java.lang.String[], int[]).\n \n \n A sample permissions request looks like this:\n \n \n private void showContacts() {\n     if (getActivity().checkSelfPermission(Manifest.permission.READ_CONTACTS)\n             != PackageManager.PERMISSION_GRANTED) {\n         requestPermissions(new String[]{Manifest.permission.READ_CONTACTS},\n                 PERMISSIONS_REQUEST_READ_CONTACTS);\n     } else {\n         doShowContacts();\n     }\n }\n\n @Override\n public void onRequestPermissionsResult(int requestCode, String[] permissions,\n         int[] grantResults) {\n     if (requestCode == PERMISSIONS_REQUEST_READ_CONTACTS\n             && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n         doShowContacts();\n     }\n }\n \n    \n    Parameters\n      \n        permissions\n        \n          String: The requested permissions. Must me non-null and not empty.\n This value must never be null.\n      \n      \n        requestCode\n        \n          int: Application specific request code to match with a result\n    reported to onRequestPermissionsResult(int, java.lang.String[], int[]).\n    Should be >= 0.\n      \n    \n  \n      See also:\n      onRequestPermissionsResult(int, String[], int[])Context.checkSelfPermission(String)"
    },
    {
        "class": "android.app.Fragment",
        "api": "android:fragmentSharedElementReturnTransition",
        "permissionText": "requestPermissions\n    \n      \n    Added in API level 23\n  Deprecated in\n    API level\n      28\n  \n      \n  \n\n    \npublic final void requestPermissions (String[] permissions, \n                int requestCode)\n    \n    \n\n    \n  Requests permissions to be granted to this application. These permissions\n must be requested in your manifest, they should not be granted to your app,\n and they should have protection level #PROTECTION_DANGEROUS dangerous, regardless whether they are declared by\n the platform or a third-party app.\n \n Normal permissions PermissionInfo.PROTECTION_NORMAL\n are granted at install time if requested in the manifest. Signature permissions\n PermissionInfo.PROTECTION_SIGNATURE are granted at\n install time if requested in the manifest and the signature of your app matches\n the signature of the app declaring the permissions.\n \n \n If your app does not have the requested permissions the user will be presented\n with UI for accepting them. After the user has accepted or rejected the\n requested permissions you will receive a callback on onRequestPermissionsResult(int, java.lang.String[], int[]) reporting whether the\n permissions were granted or not.\n \n \n Note that requesting a permission does not guarantee it will be granted and\n your app should be able to run without having this permission.\n \n \n This method may start an activity allowing the user to choose which permissions\n to grant and which to reject. Hence, you should be prepared that your activity\n may be paused and resumed. Further, granting some permissions may require\n a restart of you application. In such a case, the system will recreate the\n activity stack before delivering the result to onRequestPermissionsResult(int, java.lang.String[], int[]).\n \n \n When checking whether you have a permission you should use Context.checkSelfPermission(String).\n \n \n Calling this API for permissions already granted to your app would show UI\n to the user to decide whether the app can still hold these permissions. This\n can be useful if the way your app uses data guarded by the permissions\n changes significantly.\n \n \n You cannot request a permission if your activity sets noHistory to\n true because in this case the activity would not receive\n result callbacks including onRequestPermissionsResult(int, java.lang.String[], int[]).\n \n \n A sample permissions request looks like this:\n \n \n private void showContacts() {\n     if (getActivity().checkSelfPermission(Manifest.permission.READ_CONTACTS)\n             != PackageManager.PERMISSION_GRANTED) {\n         requestPermissions(new String[]{Manifest.permission.READ_CONTACTS},\n                 PERMISSIONS_REQUEST_READ_CONTACTS);\n     } else {\n         doShowContacts();\n     }\n }\n\n @Override\n public void onRequestPermissionsResult(int requestCode, String[] permissions,\n         int[] grantResults) {\n     if (requestCode == PERMISSIONS_REQUEST_READ_CONTACTS\n             && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n         doShowContacts();\n     }\n }\n \n    \n    Parameters\n      \n        permissions\n        \n          String: The requested permissions. Must me non-null and not empty.\n This value must never be null.\n      \n      \n        requestCode\n        \n          int: Application specific request code to match with a result\n    reported to onRequestPermissionsResult(int, java.lang.String[], int[]).\n    Should be >= 0.\n      \n    \n  \n      See also:\n      onRequestPermissionsResult(int, String[], int[])Context.checkSelfPermission(String)"
    },
    {
        "class": "android.app.Fragment",
        "api": "requestPermissions",
        "permissionText": "private void showContacts() {\n     if (getActivity().checkSelfPermission(Manifest.permission.READ_CONTACTS)\n             != PackageManager.PERMISSION_GRANTED) {\n         requestPermissions(new String[]{Manifest.permission.READ_CONTACTS},\n                 PERMISSIONS_REQUEST_READ_CONTACTS);\n     } else {\n         doShowContacts();\n     }\n }\n\n @Override\n public void onRequestPermissionsResult(int requestCode, String[] permissions,\n         int[] grantResults) {\n     if (requestCode == PERMISSIONS_REQUEST_READ_CONTACTS\n             && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n         doShowContacts();\n     }\n }"
    },
    {
        "class": "android.hardware.fingerprint.FingerprintManager",
        "api": "authenticate",
        "permissionText": "Request authentication of a crypto object. This call warms up the fingerprint hardware\n and starts scanning for a fingerprint. It terminates when\n AuthenticationCallback#onAuthenticationError(int, CharSequence) or\n AuthenticationCallback#onAuthenticationSucceeded(AuthenticationResult) is called, at\n which point the object is no longer valid. The operation can be canceled by using the\n provided cancel object.\n\n \n Requires Manifest.permission.USE_BIOMETRIC or Manifest.permission.USE_FINGERPRINT"
    },
    {
        "class": "android.hardware.fingerprint.FingerprintManager",
        "api": "hasEnrolledFingerprints",
        "permissionText": "Determine if there is at least one fingerprint enrolled.\n\n \n Requires Manifest.permission.USE_FINGERPRINT"
    },
    {
        "class": "android.hardware.fingerprint.FingerprintManager",
        "api": "isHardwareDetected",
        "permissionText": "Determine if fingerprint hardware is present and functional.\n\n \n Requires Manifest.permission.USE_FINGERPRINT"
    }
]